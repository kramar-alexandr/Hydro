external procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external function Integer POSFontSize();
external function string 255 F_Label(string);
external procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string,LongInt);
external function string 255 GetChangePaswordLink();
remote function UUID GetServerUUIDRemote();
external function string 255 RemainingEinvoicesQuantity;
external function Boolean DisplayAdditionalFields();
remote function Integer MailAcceptanceStatus(LongInt);
external function Boolean IsMoveToCloud(record SetupStatusBlock);
external function Boolean IsMoveToCloudB();
external outer function Boolean IsCloudControllerClient();
external function string 255 GetCurrentStoreName();
external function Boolean CompaniesInClientMode();
external function Boolean ProductInDemoMode();
remote function string 255 GetCompanyShortCode(string);
external function Boolean AnyModuleAvailable(); 
external function Boolean AcceptanceStatusColumnTest(string);
external function Integer FlipCharCode(Integer,Integer);
external procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external function Boolean TouchScreenLookVertical();
external procedure SysEClass_Tool(Integer,var real,var real);
external procedure GTransEClass_Tool(Integer,var real,var real);
external procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external procedure GBaseEClass_Tool(Integer,var real,var real);
external procedure TransGenVClass_Tool(Integer,var real,var real);
external procedure GetCurUser(var record UserVc);
external function string 60 UserDefined(string,string);
external function string 60 RestPMCashModePayMode();
external outer function string 255 MasterBannerURL();
external procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external function Boolean AllowedInCountry(integer);
external function Integer ResourceWindowResourceType();
external function Boolean ResPlan_Rental();
external function Boolean ResPlan_ProdOperations();
external function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external function Boolean TouchScreenLook();
external procedure ExtractObj(string,var Integer,var string);
external function Boolean IsSessionOpen(string,string,Date,Time);
external procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external function Boolean CheckOffLineRecords(Boolean);
external function string 60 TileUserDefined(string,Integer,var Integer);
external function Boolean CUVATNrColumn;
external function Integer GetInternetEnablerCountry();
external function Integer CntVarietyCode(Integer,var Array string);
external function Integer VarietyMatMax(Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external function string 20 GetMenuCode(string);
external procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external function Boolean DisplayLoginButtons();
external function Integer LoginShortcutsLines(Integer);
external function Integer LoginShortcutsPos(Real,Integer);

external procedure DefineTTRRowTypes(Integer);
external function real ItemButtons(string,Integer);
external procedure HWStoreWClassAddProducts(Integer);
external function Boolean HasYodlee();
external function Boolean HasAvalara();
external function Boolean HasCharts();
external function Boolean HasDetailedCharts();
external function Boolean HasNewRegistration();
external function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external function Integer LoginShortcuts();
external function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external function Boolean DefCustCodeSetup();

external function Boolean HasInAppsAvailable();
external function Integer CountCountries();

// Language functions LIT
external function Boolean DisplayLoginKeyPad_LIT();
external function string 255 VATZoneEditFieldLabel_LIT(Integer);
external function real VATZoneButtonsLabelsLIT(real,real,real,real);
external procedure LoginButtons2_LIT(Real,Real);
external procedure FORMDEF_LIT();
external function string 255 DemoMsgWClassTitle_LIT(Boolean,Boolean);
external procedure TBEClassDef_LIT();
external function string 255 VATZoneNameLIT();
external procedure TSERW_LIT();
external procedure TSERWNT_LIT();
external procedure TSERWTouch_LIT();
external procedure TSERWTEST_LIT();
external procedure INVFORM_LIT(Boolean);
external procedure DisplayRecordDetails_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external procedure DrawPOSInterface2_LIT(string,string,record POSButtonsVc,string,Integer,Integer);
external procedure DisplayRecordDetailsCustDisplay_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external function string 255 ResDayWClassWindowTitle_LIT();
external function string 255 ResMonWClassWindowTitle_LIT();
external function string 255 RTMonWClassWindowTitle_LIT();
external procedure SetupNightAuditWindowControls_LIT(Boolean);
external procedure CURClassDefinitionLIT();
external function real DrawPaymentModesButtons_IV_LIT(real);
external function real FunctionButtons_LIT(string);
external procedure CreditCardWindowHeader_LIT(Boolean,Boolean,Real);
external procedure CreditCardWindowButtons_LIT(string,string,real);
external procedure CreditCardWindowInvoiceDetail_LIT(Real);
external procedure CreditCardWindowDeliveryDetail_LIT(Real);
external function real DrawPaymentModesButtons_LIT();
external procedure DrawBarMenuTiles_LIT(string);
external procedure DrawRestPMOtherPay_LIT();
external procedure DisplayRecordDetailsRA_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external procedure DrawModifierButtons2_LIT(var integer,var integer);
external procedure OKCancel_LIT();
external procedure DefineElearningURLCacheLClass_LIT();
external procedure DefineElearningURLCacheDClass_LIT();
external function real TravelLogDeductions_LIT(real,real);
external procedure LoginButtons_LIT(Real);
external procedure FORMDEF2_LIT();
external procedure FORMDEF3_LIT();
external procedure ARS2RClass_LIT();
external procedure ALLVATRClass_LIT();

external function Boolean IsStandardUnused();
external function Boolean IsEnterprise();
external function Boolean StandardHansa();
external function Boolean HasATOL();

external function Boolean HasAccPeriods();
external function Boolean HasAccessGroups();
external function Boolean HasAddFee();
external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedAccounting();
external function Boolean HasAdvancedCRM();
external function Boolean HasAdvancedPricing();
external function Boolean HasAdvancedProduction();
external function Boolean HasAdvancedStock();
external function Boolean HasAged();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasBranch();
external function Boolean HasBuyBack();
external function Boolean HasCategories();
//external function Boolean HasConsigmentStock();
external function Boolean HasCommunicator();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasContactRelations();
external function Boolean HasConsolidation();
external function Boolean HasCountryPerCustomer();
external function Boolean HasCreditLimit();
external function Boolean HasCustItem();
external function Boolean HasCustomerSearchKey();
external function Boolean HasCustomerStatusReport();
external function Boolean HasDownpayments();
external function Boolean HasDefineColumns();
external function Boolean HasDeliveryAddress();
external function Boolean HasDepartments();
external function Boolean HasETaxDocuments();
external function Boolean HasEInvoicing();
external function Boolean HasEndorsedChecks();
external function Boolean HasExtraNLComment();
external function Boolean HasExtTax();
external function Boolean HasFavouriteActTypes();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasFreightAdvanced();
external function Boolean HasHideCostPrice();
external function Boolean HasHotelInterface();
external function Boolean HasGuestUserDefined();
external function Boolean HasJewelleryInterface();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIOUChecks();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasLoyaltyCards();
external function Boolean HasMailTags();
external function Boolean HasMainPartner();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNLBudgetClass();
external function Boolean HasObjects();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasOfficialSerNr();
external function Boolean HasOrderClasses();
external function Boolean HasPreferedOfficialSerNr();
external function Boolean HasNumberSeries();
external function Boolean HasPersons();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasPrepayments();
external function Boolean HasProjects();
external function Boolean HasPriceLists();
external function Boolean HasQualityControl();
external function Boolean HasReconLevel2();
external function Boolean HasReminderLevel();
external function Boolean HasRemoteBackup();
external function Boolean HasResourceDisplayGroups();
external function Boolean HasRussianPrepayment();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasReturnedGoods();
external function Boolean HasRoomPackages();
external function Boolean HasRoomTypes();
external function Boolean HasRoute();
external function Boolean HasSalesman();
external function Boolean HasSalesmanBonus();
external function Boolean HasSalesGroup();
external function Boolean HasSecondQuantity();
external function Boolean HasSerialNumbers();
external function Boolean HasServerInCloud();
external function Boolean HasSettlementDiscount();
external function Boolean HasSimulations();
external function Boolean hasSimAccruals();
external function Boolean HasSkypeConnection();
external function Boolean HasSIPServerConnection();
external function Boolean HasStrAsSignFType();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTaxMatrix();
external function Boolean HasTestFeatures();
external function Boolean HasMetroTestFeatures();
external function Boolean HasWorkOrders();
external function Boolean HasThrouLocation();
external function Boolean HasTouchScreenLook();
external function Boolean HasTREO();
external function Boolean HasVarieties();
external function Boolean HasVATZone();
external function Boolean HasWithholdingTax();
external function Boolean HasWithholdingTaxAdvanced();
external function Boolean HasWorkOrders();
external function Boolean HasWorkflowOverview();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModBA();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCons();
external function Boolean HasModCourses();
external function Boolean HasModCredMan();
external function Boolean HasModCRM();
external function Boolean HasModEDI();
external function Boolean HasModExp();
external function Boolean HasModHotel();
external function Boolean HasModHRM();
external function Boolean HasModIN();
external function Boolean HasModIntStock();
external function Boolean HasModNL();
external function Boolean HasPaymentGateway();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPOProg();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModRsrt();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();
external function Boolean HasModWHM();
external function Boolean HasModDI();
external function Boolean UsePostOKButton();
external function Boolean HasBankImport();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean HasConsStockMoveInvoices();

procedure dummy()//##ii
begin//##ii
  SetLangMode(LangLithuanian,"LIT",2);//##ii
  return;//##ii
end;//##ii
//##ii

window PODClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr,flipnr,f,rn;

  vs = 20;
  BlockLoad(CYb);
  WindowBegin("Pirkimų užsakymas",PODClass,CGview,-); 
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  CommunicateButton;
  ActiveFieldOnNew("VECode");
  Tile(0,74,false,"",VECode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Tiekėjas",Normal,VECode,false,VESClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (IsEnterprise) then begin
  EditField(h,vm=(v+=20),95,"Vartotojas",Normal,OKPersons,false,UserSClass);
  CheckBox(h4=-100,v,0,"OK",OKFlag); //!!SAMETRANSLATION
  end else begin
    CheckBox(h4=-100,v+=vs,0,"OK",OKFlag);  //!!SAMETRANSLATION
  end;
  tilenr = 1;
  TileButton(tilenr,"Sąlygos"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1; 
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1; 
  end;
  if (HasModIN) then begin
    TileButton(tilenr,"Siunt. sąlygos"); tilenr = tilenr + 1; 
  end;
  TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Užs. adresas"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Siunt. adresas"); tilenr = tilenr + 1; 
  if (IsEnterprise and StandardHansa==false) then begin
    TileButton(tilenr,"Pap. kaštai"); tilenr = tilenr + 1; 
  end;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Data",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,35,"Mok. terminas",Normal,PayDeal,false,PDSClass);
  if (IsEnterprise) then begin
  EditField(h1,v+=vs,82,"Galioja iki",Normal,ValidUntil,false,PasteCurDate);
  end;
  if (HasModIN) then begin
  EditField(h1,v+=vs,82,"Plan. siunt.",Normal,PlanShip,false,PasteCurDate);
  end;
  EditField(h2,v=vm,135,"Mūsų nuor.",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Kont. asmuo",Normal,VEContact,false,ContactSClass);
  if (HasObjects) then begin
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  EditField(h2,v+=vs,135,"Nuoroda",Normal,Reference,false,0);
  if (HasSalesman or HasSalesmanBonus) then begin
  EditField(h3,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  end;
  if (HasModTS or IsEnterprise) then begin
  EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,PRSClass);
  end;
  if (IsEnterprise) then begin
  EditField(h3,v+=vs,80,"Pirk. Užsak. klasė",Normal,POClass,false,POrderClassSClass);
  EditField(h3,v+=vs,80,"Užsak. tipas",ViewOnly,OrderType,false,0);
  end;
  CheckBox(h4,v=6,0,"Uždarytas",Closed);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Kaina su #PVM#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Kaina su mok.",InclVAT);
  end;
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(110,-41,70,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (IsEnterprise and StandardHansa==false) then begin
		EditField(110,-21,70,"Paletės",ViewOnly,TotPalletNr,true,0);
		EditField(260,-41,70,"Frachtas",Normal,ShipCost,true,0);
		EditField(260,-21,70,"Muitai",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#PVM#",ViewOnly,Sum3,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Be mok.",ViewOnly,TAX1Sum,false,0);
    end;
  end else begin
    EditField(410,-41,70,"Mok.",ViewOnly,Sum3,true,0);
  end;
  EditField(-169,-41,118,"Tarp. suma",ViewOnly,Sum1,true,0);
  EditField(-169,-21,118,"VISO",ViewOnly,Sum4,true,0);
//  CheckBox(20,-21,0,"OK",OKFlag);
  v = 24;
  if (HasModIN or HasModPL or HasObjects) then begin
    MatrixBegin(3,v,-50,-44,-,199);
  end else begin
    MatrixBegin(3,v,-25,-44,-,199);
  end;
  MatTypedRow(stp);
  Flip(0);
  MatCol(1,28,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(1,94,"Kiekis1",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Kiekis1",0,Quant,true,0); 
  end;
  EnterSkip(ArtCode);
  //cust start
  MatCol(1,140,"Kiekis2",0,PalletNr,true,0);
  //cust end
//  MatCol(1,194,"Apra‰ymas",0,Spec,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatColTL(1,194,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,234,"Aprašymas",0,Spec,false,0);
  if (HasJewelleryInterface) then begin
    MatCol(1,-337,"Sandėlio tipas",0,StockType,false,SetSClass); 
  end;
  MatCol(1,-237,"Vnt. kaina",0,Price,true,0);
  MatCol(1,-151,"%",0,vRebate,true,0);
  MatCol(1,-116,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
    MatCol(1,-30,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass); //!!SAMETRANSLATION
  end else begin
    MatCol(1,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  if (HasObjects) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,164,"Aprašymas",0,Spec,false,0);
    if (IsEnterprise) then begin
      MatCol(1,-310,"Pirk. sąsk.",0,CostAcc,false,AccSClass);
    end;
    MatCol(1,-240,"Objektai",0,Objects,false,ObjSClass);
    if (IsEnterprise) then begin
			MatCol(1,-170,"Tiek. prekė",0,VEArtCode,false,PISClass);
			MatColTL(1,-100,"Tiek. vnt.",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
			MatCol(1,-50,"Tiek. kiekis",0,VEQuant,true,0);
    end;
  end;
		if (HasModIN) then begin
			Flip(flipnr); flipnr = flipnr + 1;
		MatCol(1,164,"Aprašymas",0,Spec,false,0);
		MatCol(1,-330,"Gauta 1",0,Shipd1,true,0);
		MatCol(1,-270,"Gauta 2",0,Shipd2,true,0);
		if (HasModPL) then begin
			MatCol(1,-210,"Fakt.",0,Invd,true,0);
		end;
    if (HasModWHM) then begin
      MatCol(1,-150,"Palečių skč.",0,PalletNr,true,0);
    end;
    if (HasModTS) then begin
      MatCol(1,-90,"Projektas",0,PRCode,true,PRSClass);
    end;
    if (HasModSVO) then begin
      MatCol(1,-40,"Darb. Nr.",0,WSNr,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    if (StandardHansa==false) then begin
      MatCol(1,164,"Užsakymo tipas",0,OrderType,false,0); 
  MatCol(1,-400,"Prekės tipas",0,StockType,false,SetSClass);
    end else begin
      MatCol(1,164,"Aprašymas",0,Spec,false,0); 
    end;
    if (HasTREO) then begin
  MatCol(1,-300,"TREO",0,TREO,false,SetSClass); //!!SAMETRANSLATION
    end;
  MatCol(1,-200,"Plan. siuntimas",0,PlanShipRow,true,PasteCurDate);
  MatCol(1,-100,"Komentaras",0,Comment,true,0);
    if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,164,"Aprašymas",0,Spec,false,0);
  MatCol(1,-420,"Fr. kaštai",0,ShipCost,true,0);
  MatCol(1,-360,"Muitai",0,CustomsCost,true,0);
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Kaštai 1";end;
  MatCol(1,-300,label,0,RowCost1,true,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Kaštai 2";end;
  MatCol(1,-240,label,0,RowCost2,true,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Kaštai 3";end;
  MatCol(1,-180,label,0,RowCost3,true,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Kaštai 4";end;
  MatCol(1,-120,label,0,RowCost4,true,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Kaštai 5";end;
  MatCol(1,-60,label,0,RowCost5,true,0);
    end;
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");
  if (HasModIN and GuiType!=kGuiAndroid) then begin
    RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusPODsm");
  end;
  if (IsEnterprise) then begin
    RowMenuItem(0,"Ankstesnė pirkimo kaina",' ',' ',0,"POLastPPrsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));  //!!SAMETRANSLATION
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20; h = 110; h2 = 295;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass); 
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Bazinė valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0); 
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0); 
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);  //!!SAMETRANSLATION
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);            //!!SAMETRANSLATION
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);      //!!SAMETRANSLATION
      end;
    end else begin
      EditField(h1,v+=vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0); 
      EditField(h1,v+=vs,50,"Bazinė valiuta 2",Normal,BaseRate2,true,0); 
    end;
  end;
  if (HasModIN) then begin
    Tile(tilenr,90,false,tilenr,ShipDeal); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siuntimo sąlyga",Normal,ShipDeal,false,ShipDealSClass);
    if (IsEnterprise) then begin
  EditField(h1,v+=vs,80,"Siuntimo būdas",Normal,ShipMode,false,DMSClass);
    end;
    if (HasMultiLocations) then begin
  EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
    end;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,80,"Filialas",ViewOnly,BranchID,false,0);
//  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
//  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
//  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v=vm,80,"Pasl. Užsak. nr.",Normal,SVONr,false,0);
  EditField(h2,v+=vs,80,"Darbo Užsak. nr.",Normal,WONr,false,0);
  EditField(h2,v+=vs,80,"P/U proceso nr.",Normal,POCQStatNr,true,POCQStatSClass);
  EditField(h2,v+=vs,80,"PU kontrakto nr.",ViewOnly,POCOSerNr,true,0);
  end;
  	CheckBox(473,v=vm,0,"Faktūra prieš gavimą",InvBeforePU);
    CheckBox(473,v+=vs,0,"Nustatyti nulinį gavimų kiekį",SetZeroPUQuant); 
    EditField(h3,v+=vs,80,"Intrastat oper. kd.",Normal,IntrastatTransCode,false,IntrastatTransCodeSClass);
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,90,false,tilenr,LangCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Nuolaidų matrica",Normal,RebCode,false,RebSClass); 
    if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Faktoringas",Normal,VEFactoring,false,VESClass);
    end;
  EditField(h1,v+=vs,80,"Užsakymo nr.",Normal,OrdNr,false,0);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
    if (HasSalesGroup) then begin
  EditField(h2,v=vm,80,"Pard. grupė",Normal,SalesGroup,false,SalesGroupSClass);
  EditField(h2,v+=vs,80,"Faktūra kam",Normal,InvoiceToCode,false,VESClass);
    end;
  EditField(h2,v+=vs,80,"Pirkimų sav.",Normal,CostPerUnit,true,0);
    if (HasLanguages) then begin
    EditField(h3,v=vm,80,"Kalba",Normal,LangCode,false,LangSClass);
    end;
  end else begin
    Tile(tilenr,20,false,tilenr,Comment); tilenr = tilenr + 1;
    if (HasAdvancedPricing) then begin
      EditField(h1,v=6,80,"Nuolaidų matrica",Normal,RebCode,false,RebSClass); 
    end else begin
    	EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0); 
    end;
    if (HasLanguages) then begin
      EditField(h1,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
    end;  
  end;
  Tile(tilenr,230,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Užsakymas"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,vm=(v+=vs), -20,label,Normal,InvAddr4,false,0);
  vm = vm + 40;

  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=vm,123,"Patvirtinimo statusas",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); 
  end;
/*
//oldapprovals  
  if (HasApprovals) then begin
    ButtonFrame(h3=h+4,v=vm,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Neprašoma",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);  
  end;
*/  
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
  end;
  if (IsEnterprise) then begin
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass); 
//  EditField(h2,v+=vs,150,"VAT Reg. No.",Normal,VATNr,false,0);
//  EditField(h2,v+=vs,150,"Tel.",Normal,Phone,false,0);
//  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  end;
  Tile(tilenr,130,false,tilenr,ShipAddr0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Siuntimo",Normal,ShipAddr0,false,0);
  EditField(h,v+=vs,-20,"adresas",Normal,ShipAddr1,false,0); 
  EditField(h,v+=vs,-20,"",Normal,ShipAddr2,false,0); 
  EditField(h,v+=vs,-20,"",Normal,ShipAddr3,false,0); 
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0); 
  EditField(h,v+=vs,-20,"",Normal,DelAddr4,false,0); 
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,ShipCost); tilenr = tilenr + 1;
  vs = 20; h2 = 290; h3 = 530;
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Papild. kaštai 1";end;
  EditField(h1,v=6,70,label,Normal,Cost1,true,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Papild. kaštai 2";end;
  EditField(h2,v,70,label,Normal,Cost2,true,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Papild. kaštai 3";end;
  EditField(h1,v+=vs,70,label,Normal,Cost3,true,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Papild. kaštai 4";end;
  EditField(h2,v,70,label,Normal,Cost4,true,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Papild. kaštai 5";end;
  EditField(h1,v+=vs,70,label,Normal,Cost5,true,0);
  EnterSkip(TransDate);
  ButtonFrame(h3,v=16,130,2,"Papild. kaštų skaičiavimas"); 
  RadioButton(h3,v,0,0,"Vertė",ExtraCostsCalculation); 
  RadioButton(h3,v+=16,1,0,"Svoris",ExtraCostsCalculation); 
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
/*  
    if (IsEnterprise) then begin
      SpecialMenu("Add Planned Payment",' ',9,"PlannedPaymentPODsm"); //!!SAMETRANSLATION
    end;
*/    
    if (HasModIN) then begin
      SpecialMenu("Prekės būklė",'I',2,"ItemStatusPODsm"); 
    end;
    SpecialMenu("Pirkimų užsakymo būklė",'r',5,"POStatRnPODsm"); 
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModIN) then begin
      SpecialMenu("Sukurti gavimą",'L',0,"PUFromPODsm"); 
    end;
    if (HasModPL) then begin
      SpecialMenu("Sukurti pirkimo faktūrą",'F',1,"VIFromPODsm"); 
    end;
    if (HasRetGoodsToSupp and HasModIN) then begin
      SpecialMenu("Sukurti prekių grąžinimą",'B',6,"RetPUFromPODsm"); 
    end;
/*    
  if (HaseMail) then begin
    SpecialMenu("Create e-mail",'m',3,"CreateMailFromPODsm"); 
  end;
*/  
  end else begin
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Atidaryti mok. matricą",' ',25,"OpenVatMatrixPODsm"); 
  end;  
  SpecialMenu("Pirkimo užsakymo būklė",'r',5,"POStatRnPODsm");
  if (IsEnterprise) then begin
    SpecialMenu("Rezervacijos",' ',6,"POReservPODsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Siųsti patvirtinimui",' ',6,"POSendforAcceptancePODsm");
    SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromPODsm");
  end;
  if (HasDownpayments) then begin
    SpecialMenu("Sukurti išankstinio apmokėjimo faktūrą",' ',3,"DownPayFromPODsm");
  end;
  if (HaseMail) then begin
    SpecialMenu("Sukurti e-laišką",'m',3,"CreateMailFromPODsm");
  end;
  if (HasModIN) then begin
    SpecialMenu("Sukurti prekių gavimą",'L',0,"PUFromPODsm");
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    SpecialMenu("Sukurti tiesioginį pristatymą",'l',0,"DropSHFromPODsm");
  end;
  if (HasModPL) then begin
    SpecialMenu("Sukurti pirkimo Faktūrą",'F',1,"VIFromPODsm");
  end;
  if (HasRetGoodsToSupp and HasModIN) then begin
    SpecialMenu("Sukurti prekių grąžinimą",'B',6,"RetPUFromPODsm");
  end;
    SpecialMenu("Pridėti tiekėją",' ',0,"AddSupplierPODsm"); 
    SpecialMenu("Pridėti prekę",' ',0,"AddItemPODsm");     
  end;
  EndWindow;
end;

window PODClass:2
  wtag("language","LIT"), wtag("product","TravellingSaleman"), wtag("productcode","MobileSalesman"), wtag("device","iPad")
begin
  real h,h1,h2,h3,h4,hof,hs,l,l2,l3,t,v,vm,vs;
  record CYBlock CYb;
  Integer rn;
  
  BlockLoad(CYb);
  WindowBegin("Pirkimų užsakymas",PODClass,CGview,-); 
  SetWRect(20,80,560,350);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  ActiveFieldOnNew("VECode");     
  //CommunicateButton;
  Tile(0,74,false,"",VECode); 
  vs = 40; h1 = 15;  
  EditField(h1,vm=(v=6),180,"Nr.",Normal,SerNr,false,TSerSClass); 
  EditField(h1,v+=vs,180,"Tiekėjas",Normal,VECode,false,VESClass); 
  EnterSkip(PayDeal);
  EditField(h=225,v=vm,150,"Signers",Normal,OKPersons,false,UserSClass);  //!!SAMETRANSLATION
  CheckBox(-325,v+2,0,"Uždarytas",Closed); 
  CheckBox(-112,v+2,0,"Price Incl. VAT",InclVAT); 
  EditField(h=225,vm=(v+=vs),-20,"Pavadinimas",Normal,Addr0,false,0);

  h2 = 290; h3 = 550; h4 = -132; l = 240; l2 = 225; l3 = 200;
  EditField(h1,vm=(v+=vs+20),l,"Data",Normal,TransDate,false,PasteCurDate); 
  EditField(h1,v+=vs,l,"Mok. salygos",Normal,PayDeal,false,PDSClass); 
  EditField(h1,v+=vs,l,"Valid Until",Normal,ValidUntil,false,PasteCurDate);  //!!SAMETRANSLATION
  EditField(h1,v+=vs,l,"Planuojamas pristatymas",Normal,PlanShip,false,PasteCurDate); 
  EditField(h2,v=vm,l2,"Mūsų nuoroda",Normal,OurContact,false,0); 
  EditField(h2,v+=vs,l2,"Jūsų asmuo",Normal,VEContact,false,ContactSClass); 
  EditField(h2,v+=vs,l2,"Objektai",Normal,Objects,false,ObjSClass); 
  EditField(h2,v+=vs,l2,"Nuoroda",Normal,Reference,false,0); 
  EditField(h3,v=vm,l3,"Pardavėjas",Normal,SalesMan,false,UserSClass); 
  EditField(h3,v+=vs,l3,"Projektas",Normal,PRCode,false,PRSClass); 
  EditField(h3,v+=vs,l3,"Pir. užsak. klasė",Normal,POClass,false,POrderClassSClass); 
  EditField(h3,v+=vs,l3,"Užsakymo tipas",Normal,OrderType,false,SetSClass); 

  h1 = 20; hof = 105; hs = hof + 20;
  ColourPushButton(h1,v=v+vs+20,h1+hof,v+45,"PODClassOpenCurrency","Valiuta",4); 
  ColourPushButton(h1+=hs,v,h1+hof,v+45,"PODClassOpenDelTerms","Pristatymo terminai",4); 
  ColourPushButton(h1+=hs,v,h1+hof,v+45,"PODClassOpenComment","Komentaras",4); 
  ColourPushButton(h1+=hs,v,h1+hof,v+45,"PODClassOpenOrdAddress","Užsakymo adresas",4); 
  ColourPushButton(h1+=hs,v,h1+hof,v+45,"PODClassOpenDelAddress","Pristatymo adresas",4); 
  ColourPushButton(h1+=hs,v,h1+hof,v+45,"PODClassOpenExtraCosts","Papildomi kaštai",4); 
  MatrixBegin(0,v=v+=vs+vs,-1,-100,-,200);
  t = kInvoiceRowTypeNormal;
  MatCell(t,10,6,90,19,ArtCode,false,12,patM4black);
  MatCell(t,100,6,150,19,Quant,false,12,patM4black);
  MatCell(t,160,6,240,19,UnitCode,false,12,patM4black);
  MatCell(t,250,6,520,19,Spec,false,12,patM4black);
  MatCell(t,10,26,90,39,Price,true,12,patM4black);
  MatCell(t,100,26,240,39,vRebate,true,12,patM4black);
  MatCell(t,250,26,370,39,Sum,true,12,patM4black);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
    MatCell(t,380,26,460,39,TaxTemplateCode,false,12,patM4black);
  end else begin
    MatCell(t,380,26,460,39,VATCode,false,12,patM4black);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusPODsm");
  EndRowMenu;
  EndMatrix;
  l = 130;
  EditField(15,v=-87,l+15,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  CheckBox(67,v+vs+2,0,"OK",OKFlag);  //!!SAMETRANSLATION
  EditField(175,v,l,"Pallets",ViewOnly,TotPalletNr,true,0);  //!!SAMETRANSLATION
  EditField(320,v,l,"Freight",Normal,ShipCost,true,0);  //!!SAMETRANSLATION
  EditField(320,v+vs,l,"Customs",Normal,CustomsCost,true,0);  //!!SAMETRANSLATION
  EditField(465,v,l,"VAT",ViewOnly,Sum3,true,0); 
  EditField(465,v+vs,l,"Ext. Tax",ViewOnly,TAX1Sum,true,0);  //!!SAMETRANSLATION
  EditField(-150,v,l,"Subtotal",ViewOnly,Sum1,true,0);  //!!SAMETRANSLATION
  EditField(-150,v+vs,l,"TOTAL",ViewOnly,Sum4,true,0);  //!!SAMETRANSLATION
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm"); //!!SAMETRANSLATION
  SpecialMenu("Previous Purchase Prices",' ',4,"POLastPPrsm"); //!!SAMETRANSLATION
  SpecialMenu("Purchase Order Status",'r',5,"POStatRnPODsm"); //!!SAMETRANSLATION
  SpecialMenu("Reservations",' ',6,"POReservPODsm"); //!!SAMETRANSLATION
  if (HasTaxMatrix) then begin
    SpecialMenu("Atidaryti mokesčių matricą",' ',25,"OpenVatMatrixPODsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Create e-mail",'m',3,"CreateMailFromPODsm");
  SpecialMenu("Create Goods Receipt",'L',0,"PUFromPODsm");
  SpecialMenu("Create #Purchase Invoice#",'F',1,"VIFromPODsm");
  SpecialMenu("Create Returned Goods",'B',6,"RetPUFromPODsm");
  SpecialMenu("Create Shipment Notification",'l',0,"DropSHFromPODsm");
  EndWindow;
end;
