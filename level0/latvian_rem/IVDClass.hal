external procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external procedure DrawPOSInterface_LAT(string,string,record POSButtonsVc,Integer,string,Integer);
external procedure DisplayRecordDetails_LAT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
remote   function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external function Boolean HasTaxMatrix();
external function Boolean IsSessionOpen(string,string,Date,Time);
external function Boolean CUVATNrColumn;
external function Boolean UseTaxTemplatesforTaxCalc();
external function string 60 UserDefined(string,string);
external function real VATZoneButtonsLabelsLAT(real,real,real,real);
external function Boolean HasJewelleryInterface();
external function Boolean HasMetroTestFeatures();
external function Boolean HasLimitedAccess();
external function Boolean StandardHansa();
external function Boolean HasModCRM();
external function Boolean HasApprovals();
external function Boolean HasTREO();
external function Boolean HasVarieties();
external function Boolean HasTouchScreenLook();
external function Boolean HaseMail();
external function Boolean HasModPO();
external function Boolean HasCommunicator();
external function Boolean HasOfficialSerNr();
external function Boolean HasMultiCurrency();
external function Boolean HasBase2();
external function Boolean IsEnterprise();
external function Boolean HasPriceLists();
external function Boolean HasModSL();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModTS();
external function Boolean HasAdvancedCRM();
external function Boolean HasObjects();
external function Boolean HasSalesman();
external function Boolean HasStandardCRM();
external function Boolean HasExtTax();
external function Boolean HasModNL();
external function Boolean HasCustItem();
external function Boolean HasLanguages();
external function Boolean HasAdvancedPricing();
external function Boolean HasModSVO();
external function Boolean HasCountryPerCustomer();
external function Boolean HasVATZone();
external function Boolean HasModPOS();
external function Boolean HasModCredMan();
external function Boolean HasModPL();
external function Boolean HasMultiLocations();
external function Boolean HasRoute();
external function Boolean HasSerialNumbers();
external function Boolean HasQualityControl();
external function Boolean HasAdvancedStock();
external function Boolean HasModRent();
external function Boolean HasItemGroups();
external function Boolean HasItemClassification();
external function Boolean HasContactClassification();
external function Boolean HasSecondQuantity();
external function Boolean HasDepartments();
external function Boolean HasPreferedOfficialSerNr();
external function Boolean HasPositions();
external function Boolean HasCategories();

SetLangMode(LangLatvian,"LAT",2);

window IVDClass:2
  wtag("language","LAT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  WindowBegin("Rēķins",IVDClass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(IVVc);
if (HasTouchScreenLook==false) then begin
  ActiveFieldOnNew("CustCode");  
  SetWRect(20,80,850,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Klients",Normal,CustCode,false,CUSClass);  
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Nosaukums",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    if (HasLocalization("FIN")) then begin  
      EditField(h,vm=(v+=20),180,"Payment Ref",ViewOnly,CalcFinRef,false,0);  
    end else begin
  EditField(h,vm=(v+=20),135,"Pavadz. Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    end;
  end else begin
    v = v + 20;
    vm = v;
  end;
  CheckBox(h4=-100,v,0,"Grāmatot",OKFlag);  
  //cust start
  EditField(-200,v+=vs,80,"Plān. nosūt. dat.",Normal,PlanSendDate,false,PasteCurDate);  
  //cust end
  TileButton(1,"Nosac.");
  TileButton(2,"Artikuli");
  TileButton(3,"Valūtas");
  TileButton(4,"Nos. nosac.");
  TileButton(5,"Identifikatori");
  TileButton(6,"Cenu lapa");
  TileButton(7,"Rēķ. adrese");
  TileButton(8,"Nos. adrese");
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Rēķina dat.",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Sam. term.",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Apmaksas dat.",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Grāmatojuma dat.",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Pakalp. pieg. dat.",Normal,ServiceDelDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Mūsu kontaktp.",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Kl. kontaktpers.",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Objekti",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Atsauksme",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Kl. pas. Nr.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"Aģents",Normal,SalesMan,false,UserSClass);
  if (StandardHansa) then begin
    EditField(h3,v+=vs,80,"Nolikava",Normal,Location,false,LocationSClass);  
  end else begin
  EditField(h3,v+=vs,80,"Projekts",Normal,PRCode,false,0);
  end;  
  EditField(h3,v+=vs,80,"Kredit. iemesls",Normal,Reason,false,StandProblemsSClass);  
  //cust start
  EditField(h3,v+vs,80,"Exported",Normal,SExportDate,false,0);
  //cust end 
  if (HasLocalization("MEX")) then begin  
    EditField(h3,v+=vs,80,"Payment Mode",Normal,PMCode,false,PMSClass);  
  end;
  if (HasLocalization("BRA")) then begin  
    EditField(h3,v+=vs,80,"E-rēķinu tips",Normal,BrazilEInvType,false,BrazilEInvTypeSClass);  
  end;
  if (HasLocalization("BOL,BRA,HRV")) then begin  
    EditField(h3,v+=vs,130,"Tax Seal",Normal,TaxAdminServSeal,false,0);  
  end;
  if (HasLocalization("MEX")) then begin  
    EditField(h3,v+=vs,80,"Maks. konta Nr.",Normal,PayAccNo,false,0);  
  end;
  if (HasLocalization("RUS")) then begin  
    EditField(h3,v+=vs,-20,"Maks. info.",Normal,ReceiptInfo,false,0);  
  end;
  CheckBox(h4,v=6,0,"Apstrīdēts",DisputedFlag);
  if (StandardHansa) then begin
    CheckBox(h4,v+=16,0,"Atjaunināt noliktavu",UpdStockFlag);  
  end;
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
  //  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(h=100,-61,50,"T.Qt.1",ViewOnly,TotUnit1Qty,true,0); // OBS
  EditField(h+100,-61,50,"T.Qt.2",ViewOnly,TotUnit2Qty,true,0); // OBS
  if (CompileType!=ctiPhone) then begin
  EditField(55,-41,50,"Valūta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (UseTaxTemplatesforTaxCalc==false) then begin
  if (UserCanAction("ViewCostPrice",true)) then begin
    //EditField(160,-41,70,"GP %",Normal,GPProc,true,0);
    EditField(160,-21,70,"Kopā BP",ViewOnly,TotGP,true,0);
  end;
  EditField(290,-41,70,"Nod.2",ViewOnly,TAX2Sum,true,0);
  EditField(290,-21,70,"Atsk.nod.",ViewOnly,TAX1Sum,true,0);
  EditField(410,-41,95,"PVN",ViewOnly ,Sum3,true,0);
    end else begin
      if (UserCanAction("ViewCostPrice",true)) then begin
      //EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(290,-21,70,"Kopā BP",ViewOnly,TotGP,true,0);  
      end;
      EditField(410,-41,95,"Nod.",ViewOnly ,Sum3,true,0);  
    end;
    EditField(410,-21,95,"Pamats.",ViewOnly,BaseSum4,true,0);  
    EditField(-150,-41,95,"Starpsum.",ViewOnly ,Sum1,true,0);  
    EditField(-150,-21,95,"KOPĀ",ViewOnly ,Sum4,true,0);  
  end else begin
    EditField(55,-41,80,"Valūta",Normal,CurncyCode,false,CurncyCodeSClass);  
    EditField(55,-21,80,"PVN",ViewOnly ,Sum3,true,0);  
    EditField(-120,-41,80,"Atsk. nod.",ViewOnly,TAX1Sum,true,0);  
    EditField(-120,-21,80,"KOPĀ",ViewOnly ,Sum4,true,0);  
  end;
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Artikuls",0,ArtCode,false,ForSaleINSClass);
  //  MatCol(t,94,"Veids",0,VARList,true,VARSClass);
  //  MatCol(t,144,"Daudz.",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(t,94,"Qt.1",0,Quant,true,MATVARINSClass);  // OBS
  end else begin
    MatCol(t,94,"Daudz.",0,Quant,true,0);  
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Artikuls",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,94,"Daudz.",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Daudz.",0,Quant,true,0);  
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Kreditēt rēķinu",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeDebit,32,"Rēķina debets",true);  
  MatCol(t,208,"",0,OrdRow,false,0);  
  MatCol(t,-216,"",0,Spec,false,0);  
  MatText(t=kInvoiceRowTypeInterest,32,"Soda %",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Priekšapmaksa",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0); 
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Priekšapmaksas Nr.",true);
  MatCol(t,170,"",0,CUPNr,true,ARPay3SClass);
  MatCol(t,-300,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the VAT sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Aizdevums",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"Aizd. %",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Paraksts",false);  
  MatColTL(t,94,"Zīme",0,-1,ViewOnly,0,VoidedSign,false,0);  
  MatCol(t,144,"Apraksts",0,Spec,false,0);  
  MatText(t=kInvoiceRowTypeVoid,32,"Tukšs",false);  
  MatColTL(t,65,"Zīme",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Artikuls",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,150,"Daudz.",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Daudz.",0,Quant,true,0);  
  end;
  MatCol(t,190,"Cena",0,Price,true,0);
  MatCol(t,250,"Apraksts",0,Spec,false,0);
  MatCol(t,-195,"Sēr. Nr",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Summa",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Starpsumma",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Summa",0,-1,ViewOnly,0,Sum,true,0);
  //  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"Šī un visas nākamās rindas izdrukā nebūs redzamas",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Artikuls",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Daudz.",0,Quant,true,0);  
  MatText(t=kInvoiceRowTypeRetention,32,"Uzkrājums",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"SalesAcc",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Summa",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"DK",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Summa",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"DKS",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Summa",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=kInvoiceRowTypeCashPayment,32,"S/N",true);
  MatCol(t,94,"Summa",0,Sum,true,0);
  MatCol(t,198,"Sam. veids",0,PayMode,true,PMSClass);  
  MatCol(t,250,"Spec.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Summa",0,Sum,true,0);
  MatCol(t,108,"Punkti",0,Points,true,0);
  MatCol(t,148,"Valūta",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Spec.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Punkti",0,Points,true,0);
  MatCol(t,141,"Spec.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true);
  MatCol(t,94,"Summma",0,Sum,true,0);
  MatCol(t,198,"Sam. veids",0,PayMode,true,PMSClass);  
  MatCol(t,250,"Spec.",0,Spec,false,0);  
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"Apstiprināts",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Virsraksts",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType18,28,"Rezervēts",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Rezervēts",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Real. nodoklis",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Ietur. nodoklis",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  if (StandardHansa==false) then begin
  MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Izpārd. atlaide",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec.",0,Spec,false,0);
  MatCol(t,-235,"Deb. konts",0,SalesAcc,false,0);
  MatCol(t,-135,"Sum.",0,Sum,true,0);
  MatCol(t,-30,"PVN-k.",0,VATCode,false,0);

  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0); 
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */  
  //t = 21 kInvoiceRowTypeChequePayment  
  Flip(1);
  //  MatCol(t=kInvoiceRowTypeNormal,194,"Apraksts",0,Spec,false,0);
  t=kInvoiceRowTypeNormal;
  MatCol(t,h=144,"Vien.1",0,UnitCode,false,UnitSClass); // OBS
  MatColTL(t,h+=50,"Qt.2",0,M4UVal,ViewOnly,0,Unit2Qty,true,MATVARINSClass);  // OBS
  MatColTL(t,h+=50,"Vien.2",0,M4Code,ViewOnly,5,Unit2Code,false,UnitSClass);  // OBS
  MatCol(t,294,"Apraksts",0,Spec,false,0);  // OBS
  //cust start
  MatCol(t,-325,"Vien.cena",0,Price,true,0);
  MatCol(t,-235,"Anod.cena/m2",0,AnodPrice,true,0);
  //cust end

  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Summa",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-235,"Vien.cena",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Summa",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-235,"Vien.cena",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Summa",0,Sum,true,0);
  Flip(2);
  //OBS-->
  // MatCol(t=kInvoiceRowTypeNormal,144,"Apraksts",0,Spec,false,0);
  // MatCol(t,-360,"Realiz.k.",0,SalesAcc,false,AccSClass);
  // if (StandardHansa==false) then begin
  // MatCol(t,-310,"Uzkrāj.",0,PeriodCode,false,AutSimPerSClass);
  // end;
  // MatCol(t,-255,"Noliktava",0,Location,false,LocationSClass);
  MatCol(t=kInvoiceRowTypeNormal,h=144,"Anod.",0,Anod,true,0);  // OBS
  MatCol(t,h+=40,"Powd.",0,Powd,true,0);  // OBS
  MatCol(t,h+=40,"Mec.",0,Mec,true,0);  // OBS
  MatCol(t,h+=40,"Nosaukums",0,Spec,false,0); // OBS
  MatCol(t,-330,"Realiz.k.",0,SalesAcc,false,AccSClass);
  MatCol(t,-280,"Uzkrāj.",0,PeriodCode,false,AutSimPerSClass);
  MatCol(t,-235,"Noliktava",0,Location,false,LocationSClass);
  //OBS<--
  MatCol(t,-180,"Vieta",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Objekti",0,Objects,false,ObjSClass);
    MatCol(t,-70,"PVN kd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Objekti",0,Objects,false,ObjSClass);
    MatCol(t,-30,"PVN kd",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-360,"Realiz. konts",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-310,"Uzkrāj.",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Noliktava",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-180,"Vieta",0,PosCode,false,UsedPosSClass);
  end;
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Objekti",0,Objects,false,ObjSClass);
    MatCol(t,-70,"PVN kd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-124,"Objekti",0,Objects,false,ObjSClass);
  MatCol(t,-30,"PVN kd",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  //  MatCol(t=kInvoiceRowTypePrepayment,-224,"",0,SalesAcc,false,AccSClass);
  //  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-250,"Konts",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-170,"Uzkr.",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-104,"Objekti",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"Nod.veid.",0,TaxTemplateCode,false,TaxTemplateSClass);  
  end else begin
  MatCol(t,-30,"PVN kd",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
    MatCol(t,144,"Apraksts",0,Spec,false,0);  
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Vien.cena",0,Price,true,0);
	MatCol(t,-315,"%",0,vRebate,true,0);
	MatCol(t,-280,"Pašizm. B2",0,BasePriceB2,true,0);
	MatCol(t,-210,"Pašizmaksa",0,BasePrice,true,0);
	MatCol(t,-140,"BP",0,rowGP,true,0);
	MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vien.cena",0,Price,true,0);
	MatCol(t,-135,"%",0,vRebate,true,0);
	MatCol(t,-100,"Summa",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraksts",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Vien.cena",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Pašizm. B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Pašizmaksa",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vien.cena",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Summa",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Apraksts",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Vien.cena",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Pašizmaksa",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vien.cena",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Summa",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-370,"Aģenti",0,Salesmen,false,UserSClass); 
  MatCol(t,-300,"Sērijas Nr.",0,SerialNr,false,SerialNrSClass);
//  MatCol(t,-250,"Main Serial No.",0,MotherNr,true,0);
  MatCol(t,-220,"Cen.fakt.",0,PriceFactor,true,0);
  MatCol(t,-170,"Spec.",0,Recepy,false,RecSClass);  
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"Rindas FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-310,"Sērijas Nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"Cen.fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Spec.",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Rindas FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Koef.",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-310,"Sērijas Nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"Cen.fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Spec.",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Rindas FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
  //  MatCol(t,-40,"Koef.",0,Coefficient,true,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Apraksts",0,Spec,false,0);
  // MatCol(t,-315,"Vien.",0,UnitCode,false,UnitSClass);  //OBS
  MatCol(t,-260,"V.daudz.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plat.",0,UnitXval,true,0);
  MatCol(t,-160,"Augst.",0,UnitYval,true,0);
  MatCol(t,-120,"Biez.",0,UnitZval,true,0);
  //cust start
  MatCol(t,-80,"KG cena",0,UnitFactPrice,true,0);
  //cust end
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-315,"Vien.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"V.daudz.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plat.",0,UnitXval,true,0);
  MatCol(t,-160,"Augst.",0,UnitYval,true,0);
  MatCol(t,-120,"Biez.",0,UnitZval,true,0);
  //cust start
  MatCol(t,-80,"KG cena",0,UnitFactPrice,true,0);
  //cust end
  MatCol(t=kInvoiceRowTypeCorrection,144,"Apraksts",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Vien.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"V.daudz.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plat.",0,UnitXval,true,0);
  MatCol(t,-160,"Augst.",0,UnitYval,true,0);
  MatCol(t,-120,"Biez.",0,UnitZval,true,0);
  //cust start
  MatCol(t,-80,"KG cena",0,UnitFactPrice,true,0);
  //cust end

  Flip(6);
  t=kInvoiceRowTypeNormal;
    MatCol(t,144,"Apraksts",0,Spec,false,0);  
  MatCol(t,-390,"Kl. artikula Nr.",0,CustArtCode,false,CUINSClass);  
  MatCol(t,-300,"Koef.",0,Coefficient,true,0);  
  MatCol(t,-260,"Cenas fakt.",0,PriceFactor,true,0);  
  if (StandardHansa==false) then begin
  MatCol(t,-210,"Kl.serv.vēst.",0,CUServiceHistNr,false,0); 
  end;
  MatCol(t,-130,"Kredit.rinda",0,CreditedRow,false,0);  
  MatCol(t,-70,"Vides nod.",0,RepaExVAT,true,0); 
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-390,"Kl. artikula Nr.",0,CustArtCode,false,CUINSClass);  
  MatCol(t,-300,"Koef.",0,Coefficient,true,0);  
  MatCol(t,-260,"Cenas fakt.",0,PriceFactor,true,0);  
  if (StandardHansa==false) then begin
  MatCol(t,-210,"Kl.serv.vēst.",0,CUServiceHistNr,false,0);  
  end;
  MatCol(t,-130,"Kredit.rinda",0,CreditedRow,false,0);  
  MatCol(t,-70,"Vides nod.",0,RepaExVAT,true,0);  
  MatCol(t=kInvoiceRowTypeCorrection,144,"Apraksts",0,Spec,false,0);
  MatCol(t,-80,"Vides nod.",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,144,"Apraksts",0,Spec,false,0);  
  end;
  MatCol(t,-240,"Muitas Nr.",0,CustomsNr,false,0);  
  MatCol(t,-100,"Izcelsmes valsts",0,CountryOfOrg,false,CountrySClass);  
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraksts",0,Spec,false,0);  
  MatCol(t,-240,"Muitas Nr.",0,CustomsNr,false,0);  
  MatCol(t,-100,"Izcelsmes valsts",0,CountryOfOrg,false,CountrySClass);  
  MatCol(t=kInvoiceRowTypeCorrection,144,"Apraksts",0,Spec,false,0);  
  MatCol(t,-240,"Muitas Nr.",0,CustomsNr,false,0);  
  MatCol(t,-100,"Izcelsmes valsts",0,CountryOfOrg,false,CountrySClass);  
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G");  
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valūta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Bāzes valūta 1",Normal,BaseRate1,true,0);  
  EditField(h,v+(vs*2),50,"Bāzes valūta 2",Normal,BaseRate2,true,0);    
  EditField(h2=295,v,50,"Kurss",Normal,FrRate,true,0);  
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Bāzes valūta 1",false);  
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Bāzes valūta 2",false);      
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Nosūt. nosac.",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Nosūt. veids",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Maršruts",Normal,Sorting,false,DelRouteSClass);
  EditField(h1,v+=vs,80,"Noliktava",Normal,Location,false,LocationSClass);
    EditField(h1,v+=vs,80,"Plān. nosūt. dat.",Normal,PlanSendDate,false,PasteCurDate);  
    EditField(h1,v+=vs,80,"Plān. nosūt. laiks",Normal,PlanSendTime,false,PasteCurTime);  
  end;
  EditField(h1,v+=vs,80,"Filiāle",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Kop. daudzums",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Kop. svars",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Kop. tilpums",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Krava",Normal,FrPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Plān. piegādes dat.",Normal,PlanArrDate,false,PasteCurDate);  
    EditField(h2,v+=vs,80,"Plān. piegādes laiks",Normal,PlanArrTime,false,PasteCurTime);  
  EditField(h2,v+=vs,80,"Transporta komp.",Normal,FreightCode,false,FreightCompanySClass);
  CheckBox(h3,v=vm,0,"Izmainīt nol. atlikumu",UpdStockFlag);
    EditField(h3,v+=2*vs,80,"Piegādes PVN kd",Normal,FrVATCode,true,VATCodeSClass);
    EditField(h3,v+=vs,80,"Intrastat grām. kods",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);  
    EditField(h3,v+=vs,80,"Globāla transp. Nr.",Normal,GlobalTransportNr,false,0);  
    EditField(h3,v+=vs,80,"Globāla transp. datums",Normal,GlobalTransportDate,false,PasteCurDate);  
  end;
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Pas.Nr.",ViewOnly,OrderNr,false,0);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Pak.pas.Nr.",ViewOnly,SVONr,false,0);
  EditField(h1,v+=vs,80,"Kred.pārvald.Nr.",ViewOnly ,CredManNr,false,0);
  end;
  EditField(h1,v+=vs,80,"Stat.vērtība",Normal,StatVal,true,0);
  EditField(h1,v+=vs,80,"Grām. laiks",Normal,TransTime,false,SetSClass);
  EditField(h1,v+=(2*vs),135,"Pavadz. Nr. 2.",Normal,OfficialSerNr2,false,0);
  if (HasLocalization("BRA")) then begin  
    EditField(h1,v+=vs,80,"Federālie pakalpojumi",Normal,FedServCode,false,FederalSerSClass);  
  end;
  //  ColourPushButton(-100,v,-20,v+60,"TestIVDClassCardData","Test" & chr(10) & "CardData",4);
  //  SoftEditField(h3+50,v,100,"Control Code"  ,ViewOnly ,"TaxAuthIDCC",false,0,M4Str,60);
  if (StandardHansa==false) then begin
    EditField(h2,v=vm,135,"VID iest. kods",Normal,TaxAuthID,false,0);
  EditField(h2,v+=vs,135,"Kontroles kods",ViewOnly ,TaxAuthIDCC,false,0);
  EditField(h2,v+=vs,135,"CAE/CAEA",Normal,CAE,false,0);
  EditField(h2,v+=vs,135,"CAE derīgs līdz",Normal,CAEExpiry,false,0);
  EditField(h2,v+=vs,70,"CAEA sāk.",ViewOnly,CAEAStartDate,false,0);
  EditField(h2+150,v,70,"CAEA līdz",ViewOnly,CAEAExpiryDate,false,0);  
  EditField(h2,v+=vs,70,"CAEA sāk.",ViewOnly,CAEAStartDate,false,0);
  EditField(h2+150,v,70,"CAEA līdz",ViewOnly,CAEAExpiryDate,false,0);  
  EditField(h2,v+=vs,135,"Statuss",Normal,Status,false,SetSClass);
  end;
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Date",ViewOnly,EInvExpDate,false,0);//Tx server
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Qty",ViewOnly,EInvExpQty,false,0);
  CheckBox(h3=550,v=vm,0,"Bez atgādinājuma",NoRemndrFlag);
  CheckBox(h3,v+=16,0,"Bez soda %",NoInterestFlag);
  CheckBox(h3,v+=16,0,"Bez faktoringa",NoColectionFlag);
  CheckBox(h3,v+=16,0,"Rēķ. Nr. grāmatojumā",ARonTR);
  CheckBox(h3,v+=16,0,"Nesūtīt kā e-rēķinu",NoEInvoice);
  if (StandardHansa==false) then begin
  CheckBox(h3,v+=16,0,"Fiskālais rēķins",FiscalFlag);
  CheckBox(h3,v+=16,0,"Pašu rēķini",SelfBilling);
//    CheckBox(h3,v+=16,0,"Including VAT",InclVAT);
  end;
  //  CheckBox(h3,v+=16,0,"E-Invoice Exported",EInvExpFlag);
  Tile(6,150,false,"6",PriceList); vs = 20;
  EditField(h1,v=vm,80,"Cenu lapa",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Atlaižu matrica",Normal,RebCode,false,0);
  //  EditField(h1,v+=vs,80,"Disc. %",ViewOnly,DiscPerc,false,0);
  //  EditField(h1,v+=vs,80,"Disc. Amount",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Sākotn. klients",ViewOnly,OrgCust,false,0);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Kredītkarte",Normal,CreditCard,false,CreditCardSClass);
  EditField(h1,v+=vs,80,"Autorizācija",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,80,"Debitori",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-20,"Komentārs",Normal,InvComment,false,0);
  if (StandardHansa==false) then begin
  EditField(h2,v=vm,80,"Aģentu grupa",ViewOnly,SalesGroup,true,0);
  EditField(h2,v+=vs,80,"Valoda",Normal,LangCode,false,LangSClass);
  end else begin
    EditField(h2,v=vm,80,"Valoda",Normal,LangCode,false,LangSClass);  
  end;
  EditField(h2,v+=vs,80,"Komisija",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Kopā ar komisiju",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Procenti",Normal,IntCode,true,IntSClass);
  if (StandardHansa==false) then begin
  EditField(h2,v+=vs,80,"Org. Nr.",Normal,CredInv,false,0);
  EditField(h3,v=vm,80,"Atgādin. līmenis",Normal,LastRemndr,false,0);
  end else begin
    EditField(h3,v=vm,80,"Org. Nr.",Normal,CredInv,false,0);  
    EditField(h3,v+=vs,80,"Atgādin. līmenis",Normal,LastRemndr,false,0);  
  end;
  EditField(h3,v+=vs,80,"Pēd. atgādin. datums",Normal,LastRemDate,false,PasteCurDate);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Lojalitātes karte",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  end;
  EnterSkip(Math);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Lojalitātes līmenis",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
  EditField(h3,v+=vs,80,"Lojalitātes punkti",ViewOnly,Points,true,0);
  end;
  if (HasTREO) then begin
  EditField(h3,v+=vs,80,"TREO Nr.",Normal,TREONr,false,0);
  end;
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Rēķina"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "adrese"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Valsts",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin   
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);  
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Banka",Normal,BankCode,false,BankSClass);  
  if (StandardHansa==false) then begin
  ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Apstiprinājuma statuss");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nav nepieciešams",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nav sākts",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nav prasīts",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Procesā",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Apstiprināts",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Noraidīts",AcceptanceStatus);  
  v = VATZoneButtonsLabelsLAT(h3=290,v=vm,140,16);
  end else begin
    v = VATZoneButtonsLabelslat(h3=290,v=vm+40,140,16);
  end;
  EditField(h2=-170,v=vm,150,"Reģions",Normal,Region,false,RegionSClass); 
  EditField(h2,v+=vs,150,"PVN reģ. Nr.",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);  
  EditField(h2,v+=vs,150,"Tālrunis",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fakss",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  if (StandardHansa==false) then begin
  EditField(h1,v=6,80,"Adreses kods",Normal,DelAddrCode,false,DelAddr3SClass);
  EditField(h1,v+=vs,-20,"Nosūtīšanas",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Nosūtīšanas",Normal,ShipAddr0,false,0);  
  end;
  EditField(h1,v+=vs,-20,"adrese",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Valsts",Normal,DelCountry,false,CountrySClass);  
  if (HasLocalization("BRA")) then begin   
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);  
  end;  
  EditField(h2,v,150,"Piegādes GLN",ViewOnly,DelRecipientGLN,false,0);  
  EnterSkip(InvDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Rēķina statuss",'r',2,"IVInfoIVDsm");  
    SpecialMenu("Artikula statuss",'I',0,"ItemStatusIVDsm");  
    SpecialMenu("Atvērt grāmatojumu",'t',8,"OpenTRFromIV");  
    SpecialMenu("Veidot kredītrēķinu",' ',20,"CreateCreditNoteIVDsm");  
    SpecialMenu("Starpsumma",' ',12,"SubTotalLineIVDsm");  
    SpecialMenu("Piesaistīt priekšapmaksu",' ',4,"ConnectToPrepayIVDsm");  
/*not working yet    
    SpecialMenu("Veidot e-pastu",'m',23,"CreateMailFromIVDsm");  
*/    
  end else begin
  SpecialMenu("Artikula statuss",'I',0,"ItemStatusIVDsm");
  SpecialMenu("Artikulu meklēšana",'f',1,"ItemSearchDsm");
  SpecialMenu("Rēķina statuss",'r',2,"IVInfoIVDsm");
  SpecialMenu("Iepriekšējās pārdošanas cenas",' ',15,"IVLastSPrsm");
  SpecialMenu("Virsraksta rinda",' ',12,"HeaderLineIVDsm");
  SpecialMenu("Slēptā rinda",' ',12,"HiddenLineIVDsm");
    if (HasLocalization("HRV")) then begin  
      SpecialMenu("Add Cash Line",' ',12,"CashLineIVDsm");  
      SpecialMenu("Add Credit Card Line",' ',12,"CreditCardLineIVDsm");  
    end;
  SpecialMenu("Pievienot vides nodokli",' ',19,"RepaIVsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Pievienot uzkrājumu",' ',25,"RetentionLineIVDsm"); 
  end;
  SpecialMenu("Starpsumma",' ',12,"SubTotalLineIVDsm");
  if (HasApprovals) then begin
  SpecialMenu("Nosūtīt apstiprināšanai",' ',6,"IVSendforAcceptanceIVDsm");
  SpecialMenu("Atcelt apstiprināšanas pieprasījumu",' ',2,"CancelApprovalRequestDsm");
  end;
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Paraksts",' ',10,"SignIVDsm");  
  end;
  SpecialMenu("Pārrēķināt Bāzes valūtā 1",' ',14,"SwitchToBase1IVDsm");
  SpecialMenu("Piesaistīt priekšapmaksu",' ',4,"ConnectToPrepayIVDsm");
  SpecialMenu("Pārrēķināt atlaidi",' ',11,"RecalcDiscountIVDsm");
  SpecialMenu("Pārrēķināt svaru un tilpumu",' ',10,"RecalcWeightIVDsm");
  SpecialMenu("Atjaunot valūtas cenu lapas artikulus",' ',5,"UpdatePricesIVDsm");
  SpecialMenu("Izdrukāt kases ieņ./izd.",' ',7,"PrintCashInOutIVDsm");
    if (HasLocalization("PRT")==false) then begin   
  SpecialMenu("Drukāt faktūrrēķinu",' ',3,"PrintProformaIVDsm");
    end;
  if (StandardHansa==false) then begin
  SpecialMenu("Sūtīt uz fiskālo ierīci",' ',19,"PrintToFiscPrntIVDsm");
  SpecialMenu("Maksāt ar kredītkarti",' ',22,"CCPayIVDsm");
  SpecialMenu("Labot iemaksas",' ',24,"EditInstalmentIVDsm");
  end;
  SpecialMenu("Pārsūtīt e-rēķinu",' ',21,"ResendEIVDsm");
  if (HasLocalization("ARG")) then begin 
    SpecialMenu("Sūtīt/pārsūtīt Argentīnas e-rēķinu",'e',17,"SendArgEInvIVDsm");
    SpecialMenu("Atjaunot CAE/CAEA",'',17,"ConsultarArgEInvIVDsm");  
  end;
  if (HasLocalization("MEX")) then begin  
      SpecialMenu("Send Mexican E-Invoice",'e',17,"SendMexEInvIVDsm");  
    end;
    if (HasLocalization("BRA")) then begin  
    SpecialMenu("Sūtīt/pārsūtīt Brazīlijas e-rēķinu",' ',27,"SendBraEInvIVDsm");  
    end;
    if (HasLocalization("FIN")) then begin  
      SpecialMenu("Export Finvoice",' ',28,"ExportFinvoiceIVDsm");  
  end;
  SpecialMenu("Atvērt grāmatojumu",'t',8,"OpenTRFromIV");
  if (HasModCRM) then begin
    SpecialMenu("Veidot aktivitāti",'c',9,"CreateActFromIVDsm");  
  end;
  SpecialMenu("Veidot kases ieņēmumu",' ',1,"DoCLInFromIVD");
  SpecialMenu("Veidot kredītrēķinu",' ',20,"CreateCreditNoteIVDsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Veidot kredīta pārvaldības līgumu",' ',25,"CreateCredManIVsm");
  end;
  SpecialMenu("Veidot līgumu",' ',13,"COFromIVDsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Veidot korekcijas rēķinu",' ',16,"CorrectionIVsm");
  SpecialMenu("Veidot debeta rēķinu",' ',20,"CreateDebitNoteIVDsm");
  SpecialMenu("Veidot EDI rēķinu",' ',9,"DoEDIInvFromIVD");
  end;
  SpecialMenu("Veidot e-pastu",'m',23,"CreateMailFromIVDsm");
  if (HasLocalization("UKR")) then begin  
  SpecialMenu("Veidot pirmo notikumu",' ',18,"FirstEventIVDsm");
  end;
  if (StandardHansa==false) then begin
  SpecialMenu("Veidot iemaksu maksājumus",' ',6,"CreateInstalmentsIVDsm");
      if (HasLocalization("HRV,POL,RUS,SRB,SLV,UKR")) then begin  
  SpecialMenu("Veidot realizācijas PVN korekciju",' ',17,"VATCorrectionIVsm");
    end;
  SpecialMenu("Vadītāja atlaides autorizācija",' ',24,"MgrsDiscOverrideIVDsm");
  if (HasTaxMatrix) then begin 
    SpecialMenu("Atvērt PVN matricu",' ',25,"TestVatMatrixIVDsm");
  end;

//  SpecialMenu("GSXAutoEnrollmentIVDsm",'w',26,"GSXAutoEnrollmentIVDsm");
    SpecialMenu("Pārbaudīt Apple garantijas statusu",'w',26,"WarrantyStatusIVDsm"); 

//  SpecialMenu("TESTSendArgEInvoiceFECAESolicitar",' ',25,"TESTSendArgEInvoiceFECAESolicitar");
//  SpecialMenu("Test Mex E-Invoices",'1',0,"TestMexEInvoices");
  end;
  end;
end else begin

  date td;
  integer acnt,wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v;
  record IVVc IVr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;

  BlockLoad(LMb);
    
    //StopAlert(LMb.POSButtonGroup);
    
    wn = CurWindow;
    GetScreenSize(wn,tp,lt,bm,rt);
    switch (GuiType) begin
      case kGuiCocoa:      
        bm = bm - 80;
      case kGuiWindowsDesktop:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiGDI:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiWPF:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
    end;
    
    page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    if (page<1) then begin
      page = 1;
    end;
    //stopalert("about to call ReadPOSButtons, page:" & page);
    ReadPOSButtons("IVDClass",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr,acnt);
    SetWRect(lt,tp,rt,bm); 
//    AbsoluteWindowSize;
    if (TestEnablerFile("EnNoFullscreenWindow")==false) then begin  
      FullscreenWindow;
    end;
    BrowseButtons(false);
    Sizeable(-1,-1,0,0);
    BrowseButtons(false);
    DynamicWindow;
    UseView(IVVc);
    ActiveFieldOnNew("ivcashcommand");
    ToolBar;
//    PushButton(-340,5,-340 + 34,5+18,ToolPasteSpec,"v");
    EndToolBar;
    
    v = 20;
    h = -300; h2 = -150; h3 = -70; h4 = -10;
    
    wn = CurWindow;
    if (wn>0) then begin
      switch (GetWindowClass(wn)) begin
        case "IVDClass":
          GetWindowRecord(wn,IVr);
      end;
    end;
    td = IVr.TransDate;
    if (blankdate(td)) then begin td = CurrentDate; end;
    tt = IVr.TransTime;
    if (blanktime(tt)) then begin tt = CurrentTime; end;
    lmc = IVr.MachineName;
    if (blanktime(lmc)) then begin lmc = LMb.LocalMachineCode; end;
    sm = IVr.SalesMan;
    if (blanktime(sm)) then begin sm = CurrentUser; end;
    nr = "Rēķins: ";
    if (IVr.SerNr>0) then begin
      nr = nr & IVr.SerNr;
    end;
        
    if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
      sessdesc = "POS sesija atvērta";
    end else begin
      sessdesc = "*** POS sesija slēgta ***";    
    end;
    
    // StopAlert("IsSessionOpen(" & IVr.MachineName & "," & IVr.DrawerCode & "," & IVr.TransDate & "," & IVr.TransTime & "); -> " & sessdesc);
    
    DisplayRecordDetails_LAT(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","","",blankval,sessdesc,true,IVr.OfficialSerNr,IVr.TaxAdminServSeal);
    
    if (bm<650) then begin
      SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(360,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);
    end else begin
      SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(360,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);
    end;
    
    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        SoftEditField(110,-22,200,"Artikuls/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
      case kPOSButtonsPositionRight:
        SoftEditField(-260,-22,200,"Artikuls/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
    end;
    SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);        
    DrawPOSInterface_LAT(bc1,bc2,POSBr,acnt,"",100);
    BottomBar;

/*
  SetWRect(20,80,620,650);
  //Tile(0,285,false,"",CustCode);
  Tile(0,305,false,"",CustCode);
  EditField(40,vm=(v=6), 82,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h=200,v=vm,95, "Klients",Normal,CustCode,false,CUSClass);
  EnterSkip(Math);
  EditField(h+150,v=vm,-40,"Nos.",Normal,Addr0,false,0);
//  ColourPushButton(h=h+62,v,h+60,v+33,"IVDClassTileCurrency","Currency",9);

  MatrixBegin(15,45,-30,180,-,199);  
  MatTypedRow(stp);
  MatOverStrike(ovst);
  MatCol(t=kInvoiceRowTypeNormal,28,"Artikuls",0,ArtCode,false,INSClass);
  MatCol(t,90,"Ddz.",0,Quant,true,MATVARINSClass);
  EnterSkip(ArtCode);
  MatCol(t,120,"Cena",0,Price,true,0);
  MatCol(t,180,"Apraksts",0,Spec,false,0);
  MatCol(t,-195,"Sēr. Nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Kopā",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeVoid,28,"Tukšs",false);
  MatColTL(t,65,"Paraksts",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Artikuls",0,ArtCode,false,INSClass);
  MatCol(t,150,"Ddz.",0,Quant,true,MATVARINSClass);
  MatCol(t,190,"Cena",0,Price,true,0);
  MatCol(t,250,"Apraksts",0,Spec,false,0);
  MatCol(t,-195,"Sēr. Nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Summa",0,Sum,true,0); 
  MatText(t=3,28,"Kreditēt rēķinu",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=4,32,"Procenti",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=5,28,"Priekšapmaksa",true);
  MatColTL(t,120,"",0,-1,ViewOnly,0,ArtCode,true,0); 
  MatColTL(t,180,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=6,28,"Priekšapmaksas Nr.",true);
  MatCol(t,170,"",0,CUPNr,true,ARPay3SClass);
  MatCol(t,-200,"",0,Spec,false,0);
  MatCol(t,-120,"",0,Price,true,0);// Price holds the VAT sum, Recipe holds the date of prepaym. 
  MatCol(t,-70,"",0,Sum,true,0);
  MatText(t=10,32,"Šī un visas nākamās rindas izdrukā nebūs redzamas",false);
  MatText(t=11,28,"K",true);
  MatCol(t,28,"Artikuls",0,ArtCode,false,INSClass);
  MatCol(t,80,"Daudz.",0,Quant,true,MATVARINSClass);
  MatCol(t,110,"Cena",0,Price,true,0);
  MatCol(t,160,"Nos.",0,Spec,false,0);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Summa",0,Sum,true,0);
  MatText(t=13,28,"DK",true);
  MatCol(t,68,"",0,GCNr,false,GCSClass);
  MatCol(t,168,"",0,Spec,false,0);
  MatCol(t,-84,"Summa",0,Sum,true,0);
  MatCol(t,-28,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=14,28,"DKS",true);
  MatCol(t,68,"",0,GCNr,false,GCSSClass);
  MatCol(t,-479,"",0,Spec,false,0);
  MatCol(t,-84,"Summa",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=15,28,"S/N",true);
  MatCol(t,68,"Summa",0,Sum,true,0);
  MatCol(t,148,"Valūta",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,218,"Maks. veids",0,PayMode,true,PMSClass);
  MatCol(t,-400,"Nosauk.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,28,"CC",true);
  MatCol(t,68,"Summa",0,Sum,true,0);
  MatCol(t,148,"S. veids",0,PayMode,true,PMSClass);
  MatCol(t,208,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-204,"Grāmatots",0,AuthorizationCode,false,0);
  MatText(t=17,28,"Virsraksts",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=18,28,"Rezervēts",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=19,28,"Rezervēts",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeChequePayment,28,"CHQ",true);
  MatCol(t,68,"Summa",0,Sum,true,0);
  MatCol(t,148,"Valūta",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,218,"Sam. veids",0,PayMode,true,PMSClass);
  MatCol(t,-400,"Apraksts",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Real. nodoklis",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT sēr.",true);
  MatCol(t,94,"Apr.",0,Spec,false,0);
  MatCol(t,-235,"Debitoru konts",0,SalesAcc,false,0);
  MatCol(t,-135,"Summa",0,Sum,true,0);
  MatCol(t,-30,"PVN",0,VATCode,false,0);
  MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Izpārdoš. atlaide",true);
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,INSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;   
  CheckBox(15,v+170,0,"Grāmatot",OKFlag);
  EditFieldTLX(-500,v+164,200,"Izdot",M4Val,ViewOnly,100,30,patM4black,RetnValue,true,0);
  EditFieldTLX(-220,v+164,200,"Sum",M4Val,ViewOnly,100,30,patM4black,Sum4,true,0);    
  
  h = DrawPaymentModesButtons_IV_LAT(v+12);
  
  v = v+195+12;

  ColourPushButton(h=h+87,v,h+85,v+50,"IVDClassToolKeyPadDelete","Izdzēst",9);
  ColourPushButton(h=h+87,v,h+85,v+50,"IVDClassToolKeyPadEnter","Ievadīt_",9);
  ColourPushButton(h=h+87,v,h+85,v+50,"IVDClassTileButtons","Pogas",9);
  ColourPushButton(h=h+87,v,h+85,v+50,"IVDClassToolLogin","Pieslēgties",9);

  if (GuiType==kGuiCocoa) then begin
    TileButton(1,"1");
    TileButton(2,"2");
    TileButton(3,"3");
    TileButton(4,"4");
    TileButton(5,"5");
    TileButton(6,"6");
    TileButton(7,"7");
    TileButton(8,"8");
    TileButton(9,"9");
    TileButton(10,"10");
    TileButton(11,"11");
    TileButton(12,"12");
  end;
  
  Tile(1,400,false,"1",-);
  v = 6; h = 90; h2 = 350; vs = 20;
  v = FunctionButtons_LAT("IVDClass");
  v = ItemButtons("IVDClass",1);  
  Tile(2,400,false,"2",-);
  v = 6; h = 90; h2 = 350; vs = 20;
  v = FunctionButtons_LAT("IVDClass");
  v = ItemButtons("IVDClass",2);  
  Tile(3,400,false,"3",-);
  v = 6; h = 90; h2 = 350; vs = 20;
  v = FunctionButtons_LAT("IVDClass");
  v = ItemButtons("IVDClass",3);  
  Tile(4,400,false,"4",-);
  v = 6; h = 90; h2 = 350; vs = 20;
  v = FunctionButtons_LAT("IVDClass");
  v = ItemButtons("IVDClass",4);  
  Tile(5,400,false,"5",-);
  v = 6; h = 90; h2 = 350; vs = 20;
  v = FunctionButtons_LAT("IVDClass");
  v = ItemButtons("IVDClass",5);  
  Tile(6,400,false,"6",-);
  v = 6; h = 90; h2 = 350; vs = 20;
  v = FunctionButtons_LAT("IVDClass");
  v = ItemButtons("IVDClass",6);  
  Tile(7,400,false,"7",-);
  v = 6; h = 90; h2 = 350; vs = 20;
  v = FunctionButtons_LAT("IVDClass");
  v = ItemButtons("IVDClass",7);  

  Tile(8,200,true,"8",-);
  v = 24;
  h2 = 99+55;
  v2 = -50;  
  StringList(9,v+1-4,h2,200);
  RecordList2(h2+25,v-6,h2+300,270,"INVc");
  if (false) then begin
    RlColKey(4,4,    "Nr.",Code,false,DICode);
    RlColKey(51,51,"Apraksts",Name,false,DIName);  
  end else begin
    RlColKey(4,4,"Apraksts",Name,false,DIName);  
    RlCol(-1,-1,"",colnr,true);
  end;
  h = 6+2; 
  v2 = -50;
  ColourPushButton(h,v2,h+60,v2+33,"IVDClassToolFileDesktop","Uz sākumu",2);
  h = h+72;
  ColourPushButton(h,v2,h+60,v2+33,"IVDClassToolUp","Atpakaļ",2);

  Tile(9,152,false,"9",PayDeal);
  vs = 20; h1 = 110; h2 = 300; h3 = 480;
  EditField(h1,vm=(v=6),82,"Rēķ. dat.",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Sam. term.",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Apamksas dat.",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Grāmatojuma dat.",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Kl. pas. Nr.",Normal,CustOrdNr,false,PasteCurDate);
  EditField(h2,v=vm,135,"Atsauksme",Normal,OurContact,false,0);
  EditField(h3+50,v,50,"Valoda",Normal,LangCode,false,LangSClass);
  EditField(h2,v+=vs, 135,"Atsauksme",Normal,ClientContact,false,ContactSClass);
  EditField(h3+50,v,50,"Aģents",Normal,SalesMan,false,UserSClass);
  EditField(h2,v+=vs,135,"Noliktava",Normal,Location,false,LocationSClass);
  EditField(h3+50,v,50,"Gr. datums",Normal,TransTime,false,0);
  EditField(h2,v+=vs,135,"Pavadz.Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  EditField(h3+50,v,50,"Terminālis",Normal,MachineName,false,0);
  EditField(h2,v+=vs,135,"Kārtoš.",Normal,Sorting,false,0);
  EditField(h3+50,v,50,"Naudas lāde",Normal,DrawerCode,false,0);
  EditField(h1,v+=vs,82,"Lojalitātes karte",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  EditField(h2,v,135,"Lojalitātes līmenis",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
  EditField(h3+50,v,50,"Lojalitātes punkti",ViewOnly,Points,true,0);
  EditField(h1,v+=vs,150,"Objekti",Normal,Objects,false,ObjSClass);
  EnterSkip(Math);
  Tile(10,70,false,"10",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valūta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h2=295,v,50,"Kurss",Normal,FrRate,true,0);
  EditField(h3=360,v,50,":",Normal,ToRateB1,true,0);
  StaticText(h3+60,v+12,"Bāzes valūta 1",false);
  EditField(h,v+=vs,50,"Bāzes valūta 1",Normal,BaseRate1,true,0);
  EditField(h3,v,50,":",Normal,ToRateB2,true,0);
  StaticText(h3+60,v+12,"Bāzes valūta 2",false);
  EditField(h,v+=vs,50,"Bāzes valūta 2",Normal,BaseRate2,true,0);
  vm = -160; hm = 500; vs = 37; h2 = 40; v3 = 33;

  Tile(11,250,false,"11",-); 
  v = 12; hs = 92; h2 = 90; vs = 50;v3 = 52;
  h = 150;
  ColourPushButton(h,v,h+h2,v+v3,"IVInfoIVDsm","Rēķina stat.",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"HiddenLineIVDsm","Neredz.līn.",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"IVDClassOpenCalendar","Kalendārs",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"IVDClassNewActivity","Aktivitāte",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"IVDClassTileItems","Artikuli",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"PrintIVReceiptDsm","Druk. maks.",20);
  v = 66;
  h = 150;  ColourPushButton(h,v,h+h2,v+v3,"IVDClassTileTerms","Nosacījumi",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"IVDClassAddressTile","Adrese",20);  
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"IVDClassIVLCLASS","Rēķini",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolEnterText","Cipari",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"IVDClassToolIVReturn","Izdot",20);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"CCPayIVDsm","Maks.ar karti",20);
  v = v+54;
  h = 150; ColourPushButton(h,v,h+h2,v+v3,"GCIVsm","Pārdot DK",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v3,"OpenCashDrawer","Atv.naud.lādi",1);
  Tile(12,150,false,"12",Addr1);
  vs = 20;
  EditField(h=110,v=6,-20,"Rēķina",Normal,Addr1,false,0);
  EditField(h,v+=vs, -20,"adrese",Normal,Addr2,false,0);
  EditField(h,v+=vs, -20,"",Normal,Addr3,false,0);
  EditField(h,v+=vs, -20,"",Normal,InvAddr3,false,0);
  EditField(h,vm=(v+=vs), -20,"",Normal,InvAddr4,false,0);
  EditField(h,v+=vs, -20,"PVN Nr.",Normal,VATNr,false,0);
    
  SpecialMenu("Artikula statuss",'I',0,"ItemStatusIVDsm");
  SpecialMenu("Artikulu meklēšana",'f',1,"ItemSearchDsm");
  SpecialMenu("Veidot kases ieņ. orderi",' ',1,"DoCLInFromIVD");
  SpecialMenu("Rēķina statuss",'r',2,"IVInfoIVDsm");
  SpecialMenu("POS sesijas atskaite",' ',1,"POSEventIVDsm");
  SpecialMenu("Drukāt faktūrrēķinu",' ',3,"PrintProformaIVDsm");
  SpecialMenu("Piesaistīt priekšapmaksas",' ',4,"ConnectToPrepayIVDsm");
  SpecialMenu("Atjaunot valūtas cenu lapas artikulus",' ',5,"UpdatePricesIVDsm");
  SpecialMenu("Veidot iemaksu maksājumus",' ',6,"CreateInstalmentsIVDsm");
  SpecialMenu("Drukāt kases ieņ./izd. orderi",' ',7,"PrintCashInOutIVDsm");
  SpecialMenu("Atvērt grāmatojumu",'t',8,"OpenTRFromIV");
  SpecialMenu("Veidot EDI rēķīnu",' ',9,"DoEDIInvFromIVD");
  SpecialMenu("Pārrēķināt svaru un tilpumu",' ',10,"RecalcWeightIVDsm");
  SpecialMenu("Pārrēķināt atlaidi",' ',11,"RecalcDiscountIVDsm");
  SpecialMenu("Virsraksta rinda",' ',12,"HeaderLineIVDsm");
  SpecialMenu("Slēptā rinda",' ',12,"HiddenLineIVDsm");
  SpecialMenu("Veidot līgumu",' ',13,"COFromIVDsm");
  SpecialMenu("Pārrēķināt Bāzes valūtā 1",' ',14,"SwitchToBase1IVDsm");
  SpecialMenu("Pēdējās pārdošanas cenas",' ',15,"IVLastSPrsm");
  SpecialMenu("Veidot kredītrēķinu",' ',20,"CreateCreditNoteIVDsm");
  SpecialMenu("Veidot labojuma rēķinu",' ',16,"CorrectionIVsm");
  SpecialMenu("Veidot realizācijas PVN korekciju",' ',17,"VATCorrectionIVsm");
  SpecialMenu("Veidot e-pastu",'m',23,"CreateMailFromIVDsm");
  SpecialMenu("Nosūtīt uz fiskālo printeri",' ',19,"PrintToFiscPrntIVDsm");
  SpecialMenu("Kases ieņ.",' ',20,"POSMoneyInsm");
  SpecialMenu("Kases izd.",' ',21,"POSMoneyOutsm");
  SpecialMenu("Atvērt sesiju",' ',22,"OpenPOSSessionsm");
  SpecialMenu("Aizvērt sesiju",' ',23,"ClosePOSSessionsm");
  SpecialMenu("Skaidrās naudas atskaite",' ',24,"IVDClassCashupRnsm");
  SpecialMenu("Vadītāja atlaide",' ',25,"MgrsDiscOverrideIVDsm"); 
  SpecialMenu("Atvērt nod. matricu",' ',25,"TestVatMatrixIVDsm"); 
*/
end;
  EndWindow;
end;
