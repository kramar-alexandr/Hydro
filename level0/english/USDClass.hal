external procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external function Integer POSFontSize();
external function string 255 F_Label(string);
external procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string,LongInt);
external function string 255 GetChangePaswordLink();
remote function UUID GetServerUUIDRemote();
external function string 255 RemainingEinvoicesQuantity;
external function Boolean DisplayAdditionalFields();
remote function Integer MailAcceptanceStatus(LongInt);
external function Boolean IsMoveToCloud(record SetupStatusBlock);
external function Boolean IsMoveToCloudB();
external outer function Boolean IsCloudControllerClient();
external function string 255 GetCurrentStoreName();
external function Boolean CompaniesInClientMode();
external function Boolean ProductInDemoMode();
remote function string 255 GetCompanyShortCode(string);
external function Boolean AnyModuleAvailable();
external function Boolean AcceptanceStatusColumnTest(string);
external function Integer FlipCharCode(Integer,Integer);
external procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external function Boolean TouchScreenLookVertical();
external procedure SysEClass_Tool(Integer,var real,var real);
external procedure GTransEClass_Tool(Integer,var real,var real);
external procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external procedure GBaseEClass_Tool(Integer,var real,var real);
external procedure TransGenVClass_Tool(Integer,var real,var real);
external procedure GetCurUser(var record UserVc);
external function string 60 UserDefined(string,string);
external function string 60 RestPMCashModePayMode();
external outer function string 255 MasterBannerURL();
external procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external function Boolean AllowedInCountry(integer);
external function Integer ResourceWindowResourceType();
external function Boolean ResPlan_Rental();
external function Boolean ResPlan_ProdOperations();
external function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external function Boolean TouchScreenLook();
external procedure ExtractObj(string,var Integer,var string);
external function Boolean IsSessionOpen(string,string,Date,Time);
external procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external function Boolean CheckOffLineRecords(Boolean);
external function string 60 TileUserDefined(string,Integer,var Integer);
external function Boolean CUVATNrColumn;
external function Integer GetInternetEnablerCountry();
external function Integer CntVarietyCode(Integer,var Array string);
external function Integer VarietyMatMax(Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external function string 20 GetMenuCode(string);
external procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external function Boolean DisplayLoginButtons();
external function Integer LoginShortcutsLines(Integer);
external function Integer LoginShortcutsPos(Real,Integer);

external procedure DefineTTRRowTypes(Integer);
external function real ItemButtons(string,Integer);
external procedure HWStoreWClassAddProducts(Integer);
external function Boolean HasYodlee();
external function Boolean HasAvalara();
external function Boolean HasCharts();
external function Boolean HasDetailedCharts();
external function Boolean HasNewRegistration();
external function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external function Integer LoginShortcuts();
external function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external function Boolean DefCustCodeSetup();
// in-apps
external function Boolean HasInAppsAvailable();
external function Integer CountCountries();

// Language functions ENG
external function Boolean DisplayLoginKeyPad_ENG();
external function string 255 VATZoneEditFieldLabel_ENG(Integer);
external function real VATZoneButtonsLabelsENG(real,real,real,real);
external procedure LoginButtons2_ENG(Real,Real);
external procedure FORMDEF_ENG();
external function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external procedure TBEClassDef_ENG();
external function string 255 VATZoneNameENG();
external procedure TSERW_ENG();
external procedure TSERWNT_ENG();
external procedure TSERWTouch_ENG();
external procedure TSERWTEST_ENG();
external procedure INVFORM_ENG(Boolean);
external procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external procedure DrawPOSInterface2_ENG(string,string,record POSButtonsVc,string,Integer,Integer);
external procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external function string 255 ResDayWClassWindowTitle_ENG();
external function string 255 ResMonWClassWindowTitle_ENG();
external function string 255 RTMonWClassWindowTitle_ENG();
external procedure SetupNightAuditWindowControls_ENG(Boolean);
external procedure CURClassDefinitionENG();
external function real DrawPaymentModesButtons_IV_ENG(real);
external function real FunctionButtons_ENG(string);
external procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external procedure CreditCardWindowButtons_ENG(string,string,real);
external procedure CreditCardWindowInvoiceDetail_ENG(Real);
external procedure CreditCardWindowDeliveryDetail_ENG(Real);
external function real DrawPaymentModesButtons_ENG();
external procedure DrawBarMenuTiles_ENG(string);
external procedure DrawRestPMOtherPay_ENG();
external procedure DisplayRecordDetailsRA_ENG2(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string,string);
external procedure DrawModifierButtons2_ENG(var integer,var integer);
external procedure OKCancel_ENG();
external procedure DefineElearningURLCacheLClass_ENG();
external procedure DefineElearningURLCacheDClass_ENG();
external function real TravelLogDeductions_ENG(real,real);
external procedure LoginButtons_ENG(Real);
external procedure FORMDEF2_ENG();
external procedure FORMDEF3_ENG();
external procedure ARS2RClass_ENG();
external procedure ALLVATRClass_ENG();
external function Boolean IsStandardUnused();
external function Boolean IsEnterprise();
external function Boolean StandardHansa();
external function Boolean HasATOL();

external function Boolean HasAccPeriods();
external function Boolean HasAccessGroups();
external function Boolean HasAddFee();
external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedAccounting();
external function Boolean HasAdvancedCRM();
external function Boolean HasAdvancedPricing();
external function Boolean HasAdvancedProduction();
external function Boolean HasAdvancedStock();
external function Boolean HasAged();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasBranch();
external function Boolean HasBuyBack();
external function Boolean HasCategories();
//external function Boolean HasConsigmentStock();
external function Boolean HasCommunicator();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasContactRelations();
external function Boolean HasConsolidation();
external function Boolean HasCountryPerCustomer();
external function Boolean HasCreditLimit();
external function Boolean HasCustItem();
external function Boolean HasCustomerSearchKey();
external function Boolean HasCustomerStatusReport();
external function Boolean HasDownpayments();
external function Boolean HasDefineColumns();
external function Boolean HasDeliveryAddress();
external function Boolean HasDepartments();
external function Boolean HasETaxDocuments();
external function Boolean HasEInvoicing();
external function Boolean HasEndorsedChecks();
external function Boolean HasExtraNLComment();
external function Boolean HasExtTax();
external function Boolean HasFavouriteActTypes();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasFreightAdvanced();
external function Boolean HasHideCostPrice();
external function Boolean HasHotelInterface();
external function Boolean HasGuestUserDefined();
external function Boolean HasJewelleryInterface();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIOUChecks();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasLoyaltyCards();
external function Boolean HasMailTags();
external function Boolean HasMainPartner();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNLBudgetClass();
external function Boolean HasObjects();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasOfficialSerNr();
external function Boolean HasOrderClasses();
external function Boolean HasPreferedOfficialSerNr();
external function Boolean HasNumberSeries();
external function Boolean HasPersons();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasPrepayments();
external function Boolean HasProjects();//very strange tag
external function Boolean HasPriceLists();
external function Boolean HasQualityControl();
external function Boolean HasReconLevel2();
external function Boolean HasReminderLevel();
external function Boolean HasRemoteBackup();
external function Boolean HasResourceDisplayGroups();
external function Boolean HasRussianPrepayment();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasReturnedGoods();
external function Boolean HasRoomPackages();
external function Boolean HasRoomTypes();
external function Boolean HasRoute();
external function Boolean HasSalesman();
external function Boolean HasSalesmanBonus();
external function Boolean HasSalesGroup();
external function Boolean HasSecondQuantity();
external function Boolean HasSerialNumbers();
external function Boolean HasServerInCloud();
external function Boolean HasSettlementDiscount();
external function Boolean HasSimulations();
external function Boolean hasSimAccruals();
external function Boolean HasSkypeConnection();
external function Boolean HasSIPServerConnection();
external function Boolean HasStrAsSignFType();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTaxMatrix();
external function Boolean HasTestFeatures();
external function Boolean HasMetroTestFeatures();
external function Boolean HasWorkOrders();
external function Boolean HasThrouLocation();
external function Boolean HasTouchScreenLook();
external function Boolean HasTREO();
external function Boolean HasVarieties();
external function Boolean HasVATZone();
external function Boolean HasWithholdingTax();
external function Boolean HasWithholdingTaxAdvanced();
external function Boolean HasWorkOrders();
external function Boolean HasWorkflowOverview();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModBA();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCons();
external function Boolean HasModCourses();
external function Boolean HasModCredMan();
external function Boolean HasModCRM();
external function Boolean HasModEDI();
external function Boolean HasModExp();
external function Boolean HasModHotel();
external function Boolean HasModHRM();
external function Boolean HasModIN();
external function Boolean HasModIntStock();
external function Boolean HasModNL();
external function Boolean HasPaymentGateway();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPOProg();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModRsrt();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();
external function Boolean HasModWHM();
external function Boolean HasModDI();
external function Boolean UsePostOKButton();
external function Boolean HasBankImport();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean HasConsStockMoveInvoices();

window USDClass:5
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,v,vm,vs,tilenr;
  WindowBegin("Person",USDClass,CGview,UserView);
  SetWRect(64,80,509,380);
  Sizeable(-1,-1,0,0);
  UseView(UserVc);
  Tile(0,70,false,"",Code);
  vs = 20; h=150; h2 = 290; h3 = 350;
  EditField(h,v=6, 55,"Signature",St_i,Code,false,0);
  EditField(h,v+=vs,300,"Name",Normal,Name,false,0);
  EditField(h,v+=vs,300,"Standard ID",Normal,LoginEmailAddr,false,0);
  if (DisplayAdditionalFields) then begin
    EditField(h,v+=vs,100,"Expires",ViewOnly,ExpiryDate,true,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Access");  tilenr = tilenr + 1;
  TileButton(tilenr,"Number Series");  tilenr = tilenr + 1;
  TileButton(tilenr,"Sales");  tilenr = tilenr + 1;
  TileButton(tilenr,"Accounts");  tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Job Costing");  tilenr = tilenr + 1;
    TileButton(tilenr,"Web");  tilenr = tilenr + 1;
    TileButton(tilenr,"Time Entry");  tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Formats");  tilenr = tilenr + 1;
  if (HasSIPServerConnection) then begin
    TileButton(tilenr,"Asterisk");  tilenr = tilenr + 1;
  end;
  CheckBox(h2,6,0,"Closed",Closed);
  CheckBox(h2+100,6,0,"Unlicensed",Unlicensed);
  if (IsCloudControllerClient) then begin // Cloud Controller Specific
    CheckBox(h2+200,6,0,"SSH Closed",SSHClosed);
  end;
  tilenr = 1;
  Tile(tilenr,210,false,tilenr,AccessGroup);  tilenr = tilenr + 1;
  EditField(h,v=6,300,"Access Groups",Normal,AccessGroup,false,AccessSClass);
  EditField(h,v+=vs,100,"Start Access Level",Normal,StartLevel,false,SetSClass);
  if (HasSalesGroup) then begin
    EditField(h,v+=vs,100,"Single Function",Normal,OneFunction,false,OneFunctionSClass);
    EditField(h,v+=vs,100,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
  end;
  EditField(h,v+=vs,100,"Language",Normal,LangCode,false,LangSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,100,"Client Restriction",Normal,CanUseOS,false,SetSClass);
  end;
  EditField(h,v+=vs,100,"Contact Code",Normal,CustCode,false,ContactCUSClass);
  //cust start
  EditField(h,v+=vs,20,"DV1",Normal,DV1,false,0);
  EditField(h,v+=vs,20,"DV2",Normal,DV2,false,0);
  EditField(h,v+=vs,20,"DV3",Normal,DV3,false,0);
  //cust end
  if (IsCloudControllerClient) then begin // Cloud Controller Specific
    EditField(h,v+=vs,100,"SSH Username",Normal,SSHUsername,false,0);
  end;
//  EditField(h,v+=vs,100,"Discount Password",Normal,OldPassWord,false,0);
  if (StandardHansa==false) then begin
    ButtonFrame(h2,v=44,165,3,"Limited Access");
    RadioButton(h2,v,kLimitedAccessNoLimitation,0,"No Limitation",limitedAccess);
    RadioButton(h2,v+=16,kLimitedAccessGroupOnly,0,"Group Only",limitedAccess);
    RadioButton(h2,v+=16,kLimitedAccessUserOnly,0,"User Only",limitedAccess);
  end;
if (HansaWorld) then begin
  ButtonFrame(h2,v+=40,195,0,"User Type");
  RadioButton(h2,v,0,kTypeOfUserNamed,"Named",TypeOfUser);
  RadioButton(h2,v+=16,kTypeOfUserConcurrent,0,"Concurrent",TypeOfUser);
//  RadioButton(h2,v+=16,kTypeOfUserBusinessCommunicator,0,"Communication Centre (named)",TypeOfUser);
  RadioButton(h2,v+=16,kTypeOfUserTimekeeper,0,"Timekeeper",TypeOfUser);
  RadioButton(h2,v+=16,kTypeOfUserPOS,0,"POS User",TypeOfUser);
  EndFrame;
  CheckBox(h2,v+=25,0,"Password never expires",PasswordNeverExpires);
  if (!blankUUID(GetServerUUIDRemote)) then begin
    CheckBox(h2,v+=16,0,"User is MyStandard Admin",AdminFlag);
  end;
end;
  Pict_Field(-175,8,-5,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Add picture");
  end;
//  CheckBox(h2,v+=25,0,"Allow FTP Access",FTPLogin);
//  CheckBox(h2,v+=vs,0,"Only Voice Login",OnlyVoiceLogin); // No code for this
  Tile(tilenr,150,false,tilenr,LastOrdNr);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),65,"Order No.",Normal,LastOrdNr,false,0);
  EditField(h,v+=vs,65,"Del. No.",Normal,LastShipNr,false,0);
  EditField(h,v+=vs,65,"Inv No.",Normal,LastInvNr,false,0);
  EditField(h,v+=vs,65,"Goods Rec No.",Normal,LastPurNr,false,0);
  EditField(h,v+=vs,65,"Cash In No.",Normal,LastCLInNr,false,0);
  EditField(h,v+=vs,65,"POS Invoice",Normal,LastIVCashNr,false,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,65,"#Bar Tab#",Normal,LastRestAccNr,false,0);
  end;
//  EditField(h,v+=vs,100,"Official Inv. No.",Normal,LastOfficialSerNr,false,0);
  EditField(h3,v=vm,65,"Receipt No.",Normal,LastPayNr,false,0);
  EditField(h3,v+=vs,65,"Trans. No.",Normal,LastTRNr,false,0);
  EditField(h3,v+=vs,65,"#Purch. Inv. No.#",Normal,LastVINr,false,0);
  EditField(h3,v+=vs,65,"Payment No.",Normal,LastOPNr,false,0);
  EditField(h3,v+=vs,65,"Purchase Order No.",Normal,LastPONr,false,0);
  EditField(h3,v+=vs,65,"Cash Out No.",Normal,LastCLOutNr,false,0);
  EditField(h3,v+=vs,120,"Personal ID",Normal,IDCode,false,0);
  Tile(tilenr,170,false,tilenr,Bonus);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),65,"Bonus",Normal,Bonus,true,0);
  EditField(h3,v,120,"Our Ref",Normal,CurOurContact,false,0);
  if (StandardHansa==false) then begin
    EditField(h3+260,v,-20,"Minimum Price List",Normal,MinPLCode,false,PLDefSClass);
  end;
  EditField(h,v+=vs,65,"Location",Normal,Location,false,LocationSClass);
  EditField(h3,v,120,"Department",Normal,Department,false,DepSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,65,"Service Location",Normal,ServLocation,false,LocationSClass);
    EditField(h3,v,120,"Phone 1",Normal,Phone1,false,0);
    EditField(h,v+=vs,65,"Order Reserv. Location",Normal,ReservLocation,false,LocationSClass);
  end else begin
    EditField(h,v+=vs,120,"Phone 1",Normal,Phone1,false,0);
  end;
  EditField(h3,v,120,"Phone 2",Normal,Phone2,false,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,-20,"Order Reserv. Access",Normal,ReservLocAccess,false,ReservLocAccessSClass);
  end;
  EditField(h,v+=vs,-20,"Email Address",Normal,emailAddr,false,0);
  EditField(h,v+=vs,-20,"Specification",Normal,Spec,false,0);
  EditField(h,v+=vs,-20,"Comment",Normal,Comment,false,0);
//  EditField(h,v+=vs,65,"Expense A/C",Normal,CostAcc,false,AccSClass);
  Tile(tilenr,50,false,tilenr,PersAcc);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),65,"Account",Normal,PersAcc,false,AccSClass);
  EditField(h3,v,120,"Tag/Object",Normal,PersObjx,false,ObjSClass);
  EditField(h,v+=vs,65,"#Sort Code#",Normal,SortCode,false,0);
  EditField(h3,v,120,"Bank A/C",Normal,BankAcc,false,0);
  EditField(h3,v+=vs,-20,"Bank Name",Normal,BankName,false,BankSClass);
//  EditField(h,v+=vs,65,"Expense A/C",Normal,CostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    Tile(tilenr,170,true,tilenr,JobGroup);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6),55,"Job Group",Normal,JobGroup,false,EGSClass);
    EditField(h,v+=vs,100,"Job Descr.",Normal,Job,false,0);
    EditField(h,v+=vs,80,"Cost per Hour",Normal,CostPrHour,false,0);
    EditField(h,vm=(v+=vs),80,"Price per Hour",Normal,PricePrHour,false,0);
    EnterSkip(Math);
    CheckBox(h2,v=20,0,"Allow Short Codes only",DisAllowOther);
  //  CheckBox(h2,v,0,"Limited Access",limitedAccess);
    v = v+50;
    MatrixBegin(h-50,v=(vm+40),h+350,-7,-,99);
    MatCol(1,24,"Short Code",0,Code,false,0);
    MatCol(1,110,"Project",0,PRCode,false,PRSClass);
    MatCol(1,200,"Comment",0,Comment,false,0);
    EndMatrix;
    Tile(tilenr,30,false,tilenr,WebConf);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6),65,"Web Conference",Normal,WebConf,true,0);
    EditField(h3,v,65,"Web Start Page",Normal,WebStartPage,false,0);
    Tile(tilenr,50,false,tilenr,Supervisor);  tilenr = tilenr + 1;
    v = 6;
    EditField(h,vm=v,80,"Superior",Normal,Supervisor,false,UserSClass);
    EditField(h,v+=20,80,"Creation Date",ViewOnly,DateCreated,false,0);
    CheckBox(h2,v=vm,0,"Force Entry of Time",ForceTimeEntry);
  end;
  Tile(tilenr,210,false,tilenr,LeadingZDay);  tilenr = tilenr + 1;
  h = 70; h1 = h + 210; h2 = h + 330;

  if (GuiType==kGuiCocoa) then begin
    CheckBox(h,v,0,"Use Person's settings",UserEditCtlf);
  end else begin
    StaticText(190,v+=11,"Window Style",true);
    DropDownMenu(200,v=6,282,"WindowType",320);
    CheckBox(h,v+=20,0,"Use Person's settings",UserEditCtlf);
  end;
  ButtonFrame(h,vm=(v+=42),200,5,"Date Order");
  RadioButton(h,v,0,0,"Month, Day, Year",DateOrder);
  RadioButton(h,v+=16,1,0,"Day, Month, Year",DateOrder);
  RadioButton(h,v+=16,2,0,"Year, Month, Day",DateOrder);
  if (StandardHansa==false and IsSberbankProduct==false) then begin
    RadioButton(h,v+=16,m4_hijri,0,"Hijri",DateOrder); // We have some enum already in BCD that goes from 0 to 5..
    RadioButton(h,v+=16,m4_persian_date,0,"Persian",DateOrder);
  end;
  EndFrame;
  CheckBox(h,v+=24,0,"Leading Zero before Day",LeadingZDay);
  CheckBox(h1,v,0,"Display thousand separator",thousSepf);
  CheckBox(h,v+=16,0,"Leading Zero before Month",LeadingZMonth);
  CheckBox(h,v+=16,0,"Century",LeadingCentury);
  EditField(h2,v=vm,20,"Date Separator",Normal,DateSep,false,0);
  EditField(h2,v+=20,20,"Decimal Separator",Normal,DecimalPt,false,0);
  EditField(h2,v+=20,20,"Thousands Separator",Normal,ThousandSep,false,0);
  if (HasSIPServerConnection) then begin
    Tile(tilenr,210,false,tilenr,AstPBXConnection);  tilenr = tilenr + 1;
    h=150;
    CheckBox(h-22,v=6,0,"No Queue Fallback",ExcludeQueueFallbackf);
    EditField(h,v+=vs,100,"PBX Connection",Normal,AstPBXConnection,false,PBXConnectionSClass);
    EditField(h,v+=vs,100,"User Name",Normal,AstUserName,false,0);
    EditField(h,v+=vs,100,"Password",Normal,AstPassword,false,0);
    EditField(h,v+=vs,100,"Caller Id Number",Normal,AstCallerIdNumber,false,0);
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Tag/Object",'o',1,"CreateObjUserDsm");
  SpecialMenu("Validation Email",'e',2,"ValidateUserEmailAddressDsm");
  SpecialMenu("Check Email Address",' ',3,"CheckUserEmailAddressDsm");
  EndWindow;
end;