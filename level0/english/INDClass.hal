external procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external function Integer POSFontSize();
external function string 255 F_Label(string);
external procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string,LongInt);
external function string 255 GetChangePaswordLink();
remote function UUID GetServerUUIDRemote();
external function string 255 RemainingEinvoicesQuantity;
external function Boolean DisplayAdditionalFields();
remote function Integer MailAcceptanceStatus(LongInt);
external function Boolean IsMoveToCloud(record SetupStatusBlock);
external function Boolean IsMoveToCloudB();
external outer function Boolean IsCloudControllerClient();
external function string 255 GetCurrentStoreName();
external function Boolean CompaniesInClientMode();
external function Boolean ProductInDemoMode();
remote function string 255 GetCompanyShortCode(string);
external function Boolean AnyModuleAvailable();
external function Boolean AcceptanceStatusColumnTest(string);
external function Integer FlipCharCode(Integer,Integer);
external procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external function Boolean TouchScreenLookVertical();
external procedure SysEClass_Tool(Integer,var real,var real);
external procedure GTransEClass_Tool(Integer,var real,var real);
external procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external procedure GBaseEClass_Tool(Integer,var real,var real);
external procedure TransGenVClass_Tool(Integer,var real,var real);
external procedure GetCurUser(var record UserVc);
external function string 60 UserDefined(string,string);
external function string 60 RestPMCashModePayMode();
external outer function string 255 MasterBannerURL();
external procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external function Boolean AllowedInCountry(integer);
external function Integer ResourceWindowResourceType();
external function Boolean ResPlan_Rental();
external function Boolean ResPlan_ProdOperations();
external function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external function Boolean TouchScreenLook();
external procedure ExtractObj(string,var Integer,var string);
external function Boolean IsSessionOpen(string,string,Date,Time);
external procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external function Boolean CheckOffLineRecords(Boolean);
external function string 60 TileUserDefined(string,Integer,var Integer);
external function Boolean CUVATNrColumn;
external function Integer GetInternetEnablerCountry();
external function Integer CntVarietyCode(Integer,var Array string);
external function Integer VarietyMatMax(Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external function string 20 GetMenuCode(string);
external procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external function Boolean DisplayLoginButtons();
external function Integer LoginShortcutsLines(Integer);
external function Integer LoginShortcutsPos(Real,Integer);

external procedure DefineTTRRowTypes(Integer);
external function real ItemButtons(string,Integer);
external procedure HWStoreWClassAddProducts(Integer);
external function Boolean HasYodlee();
external function Boolean HasAvalara();
external function Boolean HasCharts();
external function Boolean HasDetailedCharts();
external function Boolean HasNewRegistration();
external function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external function Integer LoginShortcuts();
external function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external function Boolean DefCustCodeSetup();
// in-apps
external function Boolean HasInAppsAvailable();
external function Integer CountCountries();

// Language functions ENG
external function Boolean DisplayLoginKeyPad_ENG();
external function string 255 VATZoneEditFieldLabel_ENG(Integer);
external function real VATZoneButtonsLabelsENG(real,real,real,real);
external procedure LoginButtons2_ENG(Real,Real);
external procedure FORMDEF_ENG();
external function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external procedure TBEClassDef_ENG();
external function string 255 VATZoneNameENG();
external procedure TSERW_ENG();
external procedure TSERWNT_ENG();
external procedure TSERWTouch_ENG();
external procedure TSERWTEST_ENG();
external procedure INVFORM_ENG(Boolean);
external procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external procedure DrawPOSInterface2_ENG(string,string,record POSButtonsVc,string,Integer,Integer);
external procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external function string 255 ResDayWClassWindowTitle_ENG();
external function string 255 ResMonWClassWindowTitle_ENG();
external function string 255 RTMonWClassWindowTitle_ENG();
external procedure SetupNightAuditWindowControls_ENG(Boolean);
external procedure CURClassDefinitionENG();
external function real DrawPaymentModesButtons_IV_ENG(real);
external function real FunctionButtons_ENG(string);
external procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external procedure CreditCardWindowButtons_ENG(string,string,real);
external procedure CreditCardWindowInvoiceDetail_ENG(Real);
external procedure CreditCardWindowDeliveryDetail_ENG(Real);
external function real DrawPaymentModesButtons_ENG();
external procedure DrawBarMenuTiles_ENG(string);
external procedure DrawRestPMOtherPay_ENG();
external procedure DisplayRecordDetailsRA_ENG2(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string,string);
external procedure DrawModifierButtons2_ENG(var integer,var integer);
external procedure OKCancel_ENG();
external procedure DefineElearningURLCacheLClass_ENG();
external procedure DefineElearningURLCacheDClass_ENG();
external function real TravelLogDeductions_ENG(real,real);
external procedure LoginButtons_ENG(Real);
external procedure FORMDEF2_ENG();
external procedure FORMDEF3_ENG();
external procedure ARS2RClass_ENG();
external procedure ALLVATRClass_ENG();
external function Boolean IsStandardUnused();
external function Boolean IsEnterprise();
external function Boolean StandardHansa();
external function Boolean HasATOL();

external function Boolean HasAccPeriods();
external function Boolean HasAccessGroups();
external function Boolean HasAddFee();
external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedAccounting();
external function Boolean HasAdvancedCRM();
external function Boolean HasAdvancedPricing();
external function Boolean HasAdvancedProduction();
external function Boolean HasAdvancedStock();
external function Boolean HasAged();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasBranch();
external function Boolean HasBuyBack();
external function Boolean HasCategories();
//external function Boolean HasConsigmentStock();
external function Boolean HasCommunicator();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasContactRelations();
external function Boolean HasConsolidation();
external function Boolean HasCountryPerCustomer();
external function Boolean HasCreditLimit();
external function Boolean HasCustItem();
external function Boolean HasCustomerSearchKey();
external function Boolean HasCustomerStatusReport();
external function Boolean HasDownpayments();
external function Boolean HasDefineColumns();
external function Boolean HasDeliveryAddress();
external function Boolean HasDepartments();
external function Boolean HasETaxDocuments();
external function Boolean HasEInvoicing();
external function Boolean HasEndorsedChecks();
external function Boolean HasExtraNLComment();
external function Boolean HasExtTax();
external function Boolean HasFavouriteActTypes();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasFreightAdvanced();
external function Boolean HasHideCostPrice();
external function Boolean HasHotelInterface();
external function Boolean HasGuestUserDefined();
external function Boolean HasJewelleryInterface();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIOUChecks();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasLoyaltyCards();
external function Boolean HasMailTags();
external function Boolean HasMainPartner();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNLBudgetClass();
external function Boolean HasObjects();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasOfficialSerNr();
external function Boolean HasOrderClasses();
external function Boolean HasPreferedOfficialSerNr();
external function Boolean HasNumberSeries();
external function Boolean HasPersons();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasPrepayments();
external function Boolean HasProjects();//very strange tag
external function Boolean HasPriceLists();
external function Boolean HasQualityControl();
external function Boolean HasReconLevel2();
external function Boolean HasReminderLevel();
external function Boolean HasRemoteBackup();
external function Boolean HasResourceDisplayGroups();
external function Boolean HasRussianPrepayment();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasReturnedGoods();
external function Boolean HasRoomPackages();
external function Boolean HasRoomTypes();
external function Boolean HasRoute();
external function Boolean HasSalesman();
external function Boolean HasSalesmanBonus();
external function Boolean HasSalesGroup();
external function Boolean HasSecondQuantity();
external function Boolean HasSerialNumbers();
external function Boolean HasServerInCloud();
external function Boolean HasSettlementDiscount();
external function Boolean HasSimulations();
external function Boolean hasSimAccruals();
external function Boolean HasSkypeConnection();
external function Boolean HasSIPServerConnection();
external function Boolean HasStrAsSignFType();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTaxMatrix();
external function Boolean HasTestFeatures();
external function Boolean HasMetroTestFeatures();
external function Boolean HasWorkOrders();
external function Boolean HasThrouLocation();
external function Boolean HasTouchScreenLook();
external function Boolean HasTREO();
external function Boolean HasVarieties();
external function Boolean HasVATZone();
external function Boolean HasWithholdingTax();
external function Boolean HasWithholdingTaxAdvanced();
external function Boolean HasWorkOrders();
external function Boolean HasWorkflowOverview();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModBA();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCons();
external function Boolean HasModCourses();
external function Boolean HasModCredMan();
external function Boolean HasModCRM();
external function Boolean HasModEDI();
external function Boolean HasModExp();
external function Boolean HasModHotel();
external function Boolean HasModHRM();
external function Boolean HasModIN();
external function Boolean HasModIntStock();
external function Boolean HasModNL();
external function Boolean HasPaymentGateway();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPOProg();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModRsrt();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();
external function Boolean HasModWHM();
external function Boolean HasModDI();
external function Boolean UsePostOKButton();
external function Boolean HasBankImport();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean HasConsStockMoveInvoices();

window INDClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  LongInt bm,lt,rt,tp;

  BlockLoad(CYb);
  WindowBegin("Item",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Image");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
    Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"No.",Normal,Code,false,0);
  EditField(h2,v,80,"Group",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Description",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternative Code",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Pricing"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"#Jewellery#"); tilenr = tilenr + 1;
    TileButton(tilenr,"Watch"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"#Stock#"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Warehouse"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Recipe"); tilenr = tilenr + 1;
  TileButton(tilenr,"A/C"); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Image"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Varieties"); tilenr = tilenr + 1;
  TileButton(tilenr,"Texts"); tilenr = tilenr + 1;
  TileButton(tilenr,"Cost Model"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"User Values"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Notes"); tilenr = tilenr + 1;
  if (HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Closed",Terminated);
  CheckBox(h2,v,0,"Not For Sales",NotForSales);
  if (GuiType==kGuiiPhone) then begin
    GetScreenSize(CurWindow,tp,lt,bm,rt);
    Pict_Field(5,v+=20,rt-10,bm-10,"");
  end;
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Unit",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Cost Price",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Base Price",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Base Price Change",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Price Factor",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100,"Item Formula",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Markup %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Bonus %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Tags/Objects",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
    EditField(h,v+=vs,-240,"Classification",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
    ButtonFrame(h1,v=24,120,4,"Item Type");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Item Type");
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Plain",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"#Stocked# Item",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Structured Item",ItemType);
  if (StandardHansa==false) then begin
    RadioButton(h1,v+=16,kItemTypeService,0,"Service",ItemType);
  end;
  EndFrame;
  
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Add picture");
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1,v+=32,0,"Treat Item as Material on Project",ItemMaterial);
  end;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metal",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Weight",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Size",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Length",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Reference",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Major Stone Detail",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"#Colour#",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Clarity",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Certificate",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Minor Stone Detail",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Watch Brand",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Style Name",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Watch Metal",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Movement",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Bracelet/Strap",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Gender",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Other",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Other2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serial Number Tracking");
  RadioButton(h1,v,0,0,"None",SerNrf);
  RadioButton(h1,v+=16,1,0,"Unit Number",SerNrf);
  RadioButton(h1,v+=16,2,0,"Batch Number",SerNrf);
  CheckBox(h1+200,v,0,"Do not Require Batch No. on POS Invoice",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Minimum Level",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maximum Level",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Department",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Shelf Code",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Default Source",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Environment Tax per #Kilo#",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Default Order Type",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Hazard Level",Normal,HazLevCode,false,HazLevSClass);
    EditField(h5,v ,50,"Alcohol %",Normal,AlcPrc,true,0);
    if (HasLocalization("PRT")) then begin
      EditField(h6,v, 80,"Stock Item Type",Normal,StockItemType,false,SetSClass);
    end;
  end;
  EditField(h,v+=vs ,100,"Unit 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Conversion 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Unit Coefficient",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Conversion 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Tihedus",Normal,Density,true,0);
    EditField(h5,v ,50,"Weight",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
    Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6) ,100,"Default Pallet Item",Normal,DefPalletItem,true,INSClass);
    EditField(h5,v ,80,"Picking Area",Normal,PickArea,false,LocAreaSClass);
    EditField(h,v+=vs ,100,"Default Location Area",Normal,LocArea,false,LocAreaSClass);
    EditField(h5,v ,50,"Pallets In Picking Area",Normal,PalletsInPickArea,true,0);
    EditField(h,v+=vs ,50,"Max. Qty on Pallet",Normal,QtyonPallet,true,0);
    EditField(h4,v ,50,"Pallet Layers",Normal,PalletLayers,true,0);
    EditField(h5,v ,50,"Qty per Layer",Normal,QtyonPalletLayer,true,0);
    EditField(h,v+=vs ,50,"Full Pallet Width",Normal,PalletWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,PalletHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,PalletDepth,true,0);
    EditField(h,v+=vs ,50,"Default Position Width",Normal,DefPosWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,DefPosHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,DefPosDepth,true,0);
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Density",Normal,Density,true,0);
    EditField(h5,v ,50,"Net Weight",Normal,NetWeight,true,0);
    EditField(h5,v+=vs ,50,"Weight",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Cost Price",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h5,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end;
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Cost Price in Base 2",Normal,InPriceB2,true,0);
    ButtonFrame(h1,v+=24,200,4,"Upd. Cost Price at Goods Receipt");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Upd. Cost Price at Goods Receipt");
  end;
  RadioButton(h1,v,0,0,"No",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Last Purchase Cost (incl. extras)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Weighted Average",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Last Purchase Cost (excl. extras)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Upd. Cost Price at #Stock# Revaluation");
  RadioButton(h5,v,0,0,"No",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Last Revaluation Cost",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Weighted Average",SRUpdateCost);
  if (StandardHansa==false) then begin
    EditField(h,v=vm+2*vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end;
  EditField(h,v+=vs ,100,"Weighted Average",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Weighted Av., Base 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Last Pur. Cost (incl. extras)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Last Pur. Price (excl. extras)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Last Purchase Currency",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fixed Freight",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Include Item Fixed Charge",InclItemFreight);
  CheckBox(h5,v,0,"Has Excise",HasExcise);
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Recipe",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Paste Components during Entry",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Invoice Recipe",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Barcode",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Contract Item",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Commodity Code",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Rental Invoicing",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"EKN Code",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Classification of Products and Services",Normal,CPSCode,false,0);
  end;
  if (HasLocalization("LVA")) then begin
    EditField(h,v+=vs,55,"Fiscal Department",Normal,FiscalDep,false,0);
  end;
  EditField(h,v+=vs ,120,"Warranty Months",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"#Colour#",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Sort Code",Normal,SortCode,true,0);
  EditField(h,v+=vs,-40,"Alternative Code",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Warning",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"#Dom.# Sales A/C",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,55,"Serv. Invble Sales A/C",Normal,SVOInvbleSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Components Usage",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. Materials Usage A/C",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  EditField(h2=360,v=vm,55,"#Dom.# Cost A/C",Normal,CostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,VATZoneNameENG & "Cost A/C",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Export Cost A/C",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,55,"Serv. Invble Cost A/C",Normal,SVOInvbleCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Warranty Cost A/C",Normal,SVOWarrantyCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Contract Cost A/C",Normal,SVOContractCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Goodwill Cost A/C",Normal,SVOGoodwillCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Hotel WIP A/C",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=540,v=vm,20,"#Dom.# #VAT# Code",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,20,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
  if (HasExtTax) then begin
    CheckBox(h2,v+=20,0,"Calculate Perception Taxes",Perceptions);
  end;
  if (StandardHansa==false) then begin
    if (HasWithholdingTax) then begin
      CheckBox(h2,v+=16,0,"Calculate Withholding Taxes",Withholdings);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      EditField(h2=670,v=vm,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabel_ENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    v = vm; h2=680;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(h2,v,20,"Reverse #VAT# Code",Normal,RvrsVATCode,false,VATCodeSClass); v = v + vs;
    end;
    if (HasLocalization("SWE")) then begin
      EditField(h2,v,20,"Chemical Tax Code",Normal,ChemicalTaxCode,false,ChemicalTaxCodeSClass); v = v + vs;
    end;
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Variety Mask",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Report Order",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Subsets",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Language",0,LangCode,false,LangSClass);
  MatCol(1,94,"Text",0,Text,false,0);
  EndMatrix;
  //cust start
  EditField(85,-21,50,"Perimeeter",Normal,Perimeter,true,0);
  EditField(225,-21,50,"Length",Normal,Spread,true,0);
  EditField(335,-21,80,"PG1",Normal,PG1,false,0);
  EditField(510,-21,80,"PG2",Normal,PG2,false,0);
  //cust end
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Primary Cost Model");
  RadioButton(h,v,0,0,"Default",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Cost Price",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _of Base Price",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Weighted Average",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Queued",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"None",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Queued Cost Model");
  RadioButton(h,v,0,0,"Default",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO Price",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO Price",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Cost Price for Serial Number");
  RadioButton(h2,v,0,0,"Default",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Cost Price not for Serial Number",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Cost Price for Serial Number",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Queued Cost Model per Location");
  RadioButton(h2,v,0,0,"Default",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Queued Cost not per Location",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Queued Cost per Location",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"WA per Location");
  RadioButton(h2,v,0,0,"Default",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"WA not per Location",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"WA per Location",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Cost Price per Location");
  RadioButton(h2,v,0,0,"Default",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Cost Price not per Location",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Cost Price per Location",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
    h = 180; v = 6;
    label = UserDefined("INVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("INVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("INVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("INVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("INVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("INVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
    end;
    label = UserDefined("INVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
    end;
    label = UserDefined("INVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
    end;
    label = UserDefined("INVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
    end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Notes",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  if (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status Report",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Recalculate Price List",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    SpecialMenu("Item History",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Item Location Status",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status per Alternative Code",'S',5,"ItemStatusAltINDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Purchase Item",' ',1,"PIFromINDsm");
  SpecialMenu("Recipe",' ',2,"RecFromINDsm");
  EndWindow;
end;