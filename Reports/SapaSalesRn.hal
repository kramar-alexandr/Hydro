external procedure S_EmptyString(integer); 
external procedure S_Export(string,integer); 
external procedure S_ExportVal(val,integer); 
external function boolean FindMetalPrice(date,var row MetalPriceBlock);
external function string 5 SapaCheckOrder(record IVVc,var date,var date);
external procedure CheckItemSapa(record INVc, var string, var string, var string);



external inner function LongInt DateDiff(Date,Date);
external inner procedure HTCustClass(string,var string);
external inner function roundmode SetRoundModeD(Integer);

external inner procedure ValToHALString(val,string,var string);
external inner procedure HTCusts(string, string, var string);
external inner procedure HT2Per(date,date,var string);
external inner procedure HTCustCat(string,var string);
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

external inner procedure GetDateTurnover(string,string,string,string,string,record ICSVc,string,Date,Date,var val,Integer);
//external inner function Boolean FindICS(string,string,string,string,var record ICSVc);
external inner procedure ItemDateTurnover(string,string,string,string,string,string,Date,Date,string,var val);
external inner function Boolean TestArtCodeMatch(string,string);
external inner procedure PrintStrings(record RcVc);
external inner procedure PrintStrings2(string,val,val,val,val);
external inner procedure PrintStrings3(val,val,val,val);
external inner procedure PrintStrings4(string,string,string,val,val,val,val,val,val);
external inner procedure HT2Per(Date, Date , var string);
external inner procedure PrintGroup(string);
external inner procedure GetITName(string,string,var string);
external inner procedure Base1ToBase2(var val,Date,var val);
external inner function Boolean SetInSet2(string,string);
external inner function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external inner procedure HTSaleMan(string, var string);

function integer CheckMatchTel(string swhere, string swhat)
begin
  integer i;
  integer est;
  
  est = 0;
  for (i=1;i<=len(swhere);i=i+1) begin
    if (CharacterMatch(swhere,swhat,i)) begin
      est = i;
      i = len(swhere);
    end;
  end;
  CheckMatchTel = est;
  return;
end;

global
function boolean GetItemTel2016(var val fprice, var val AddTreatment,var record ExportAutoBlock ExportAutoBl,var record INVc INr,string icode,var string itemtype,var val koef,var val Anodising,var val PowderCoating,var val Fabrication,date sdate,date edate,Date RegDate,val qty,date d1,LongInt tyear,LongInt lyear)
begin
  //record INVc INr;
  row INVc INrw;
  row SMVc SMrw;
  integer lcnt,l;
  integer rwcnt,i;
  integer p,x;
  date ContrDate,fdate;
  val ContrPrice;
  date bldate;
  boolean test;
  //date lyeard1,lyeard2,dat1;
  string 10 std; 

  record LangBlock Langr;
  row LangBlock Langrw;
  boolean res;
/*
  dat1 = StringToDate("01.01." & lyear);
  // 12.12.00
  std = DateToString(sdate,"DD.MM.YYYY");
  std = Left(std,6);
  lyeard1 = dat1;

  std = DateToString(edate,"DD.MM.YYYY");
  std = Left(std,6);
  lyeard2 = StringToDate(std & lyear);
*/
  INr.Code = icode;
  ContrDate = CurrentDate;
  fdate = CurrentDate;
  ResetLoop(INr);
  itemtype = "";
  fprice     = blankval;

  Anodising     = blankval;
  PowderCoating = blankval;
  Fabrication   = blankval;
  AddTreatment = blankval;

  if ReadFirstMain(INr,1,true) then begin
    itemtype = INr.Group;
    koef = INr.UnitCoefficient;
    /*if (INr.Code=="333918-A") then begin 
      Trace(INr.Code,koef);
    end;
    */
    lcnt = MatRowCnt(INr);
    // NEW
    BlockLoad(Langr);
    rwcnt = MatRowCnt(Langr);

    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(Langr,i,Langrw);
      ContrDate  = CurrentDate;
      ContrPrice = 0;
      fprice = 0;
      fdate = CurrentDate;

      if (Left(Langrw.Code,2) ==  "PT") then begin
        if (Langrw.Code <> "PTFA") then begin

          for (l=0;l<lcnt;l=l+1) begin
            MatRowGet(INr,l,INrw);
            if (INrw.LangCode ==  Langrw.Code) then begin
              x = CheckMatchTel(INrw.Text,"/");
              if (x==0) then begin
                fdate = CurrentDate;
              end else begin
                fdate = StringToDate(Mid(INrw.Text,x,10));
              end;
              test = true;
              if (RegDate>ContrDate) then begin test = false; end;
              if (fdate<ContrDate) then begin test = false; end;
              if test then begin
                ContrDate  = fdate;
                ContrPrice = StringToVal(INrw.Text,M4Val);
                //Trace(INr.Code,ContrPrice);
                fprice = ContrPrice;
              end;
            end;
          end;
        end;
      end;

      if (ContrPrice <> 0) then begin
        //LogText(0,"Item: " & INr.Code & "/" &  ContrPrice );
        p = 2; 
        if (Langrw.Code == "PTPC")  then begin
          p = 3;
          //nk PowderCoating = PowderCoating + (ContrPrice*qty/1000);
          PowderCoating = PowderCoating + (ContrPrice*qty); //1000;
        end;
        //28.11
        
        if (Langrw.Code == "PTFA")  then begin
          p = 4;
          AddTreatment = AddTreatment + (ContrPrice*qty);
        end;
    //    -PTFAÐPTNA5-PTNA1-PTNA2-PTGD-PTHX1-PTHX3-PTHX5-PTPC-PTCR-PTHMWÑPTHXR
        if SetInSet(Langrw.Code,ExportAutoBl.RevenueBasic) then begin 
          p = 4;
          Fabrication = Fabrication + (ContrPrice*qty);
          res = true;
        end;
     
        if (p==2) then begin
          Anodising = Anodising + (ContrPrice*qty); //1000;
          //SMrw.DebVal = SMrw.DebVal + (ContrPrice*qty/1000);
        end;
      end;
    end;
  // END NEW
    GetItemTel2016 = res;
  end;
  
 // if (INr.Code=="333918-A") then begin 
     // Trace(INr.Code,koef);
 //   end;
 // LogText(0,"Item: " & INr.Code & " /Anodising " & Anodising & " /PowderCoating " & PowderCoating & " /Fabrication " & Fabrication);
  return;
end;


procedure MakeMarginString(val t,var string res)
begin
  string 255 tstr;

  ValToHALString(t,"2",tstr);  
  if (t<0) then begin
    res = "-";
    res = "";
  end else begin
    res = "+";
  end;
  res = res & tstr;
  res = res & "%";
  return;
end;


procedure CalcGPProc(var val gp,val total,var string gppstr)
begin
  val gpp;
  
  if (gp==0) then begin gp = 1; end;
  gpp = gp * 100;
  gpp = gpp / total;  
  if (gp==total) then begin gpp = 100; end;
  gpp = Round(gpp,SetRoundModeD(2));
  MakeMarginString(gpp,gppstr);
  return;
end;

global updating
function boolean S_PrintItemDetAll(string outtype,record RcVc RepSpec,var val  t_kog2, var val t_novat, var val  t_r11, var val t_spread, var val t_Anodising, var val t_PowderCoating, var val  t_Dies, var val t_Others,  var val t_Extrusions, var val t_Fabrication, var val t_Accessories,var val t_cost,var val tA_r14_17, var val tP_r14_17,var val t_avpr1)
begin 
  record IVVc IVr;
  record CUVc CUr;
  row IVVc IVrw;
  integer i,rwcnt;
  boolean test,TrHs;
  boolean sold;
  string 20 item;
  boolean cuPrinted; 
  record INVc INr;
  integer k;
  string 255 tstr;
  string 5 itemtype;
  val koef;  

  Date dat1;
  String 10 std;
  LongInt LastYear,ThisYear;
  string 5 itype;
  string 3 kweek;
  integer rw,b;
  integer ilan,irow,NrWeeks;
  integer weeknumb,secnum;
  val ikoef,wkoef;
  
  
  val gp,c_gp,t_gp;
  val kog2,kog1,c_kog1,c_kog2;
  val novat,c_novat;
  val cost,c_cost;
  val val31,c_val31;     // (3) PT codes
  
  val QtyInTons_M;     // (2) Quantity in tons
  val TotalSales_tons; // (10) Total sales
  val QtyInTons;

  Val avpr1, c_avpr1; 	   // All together , Average Price
  Val qty1, c_qty1;
  val sumval, c_sumval;
  val Anodising, c_Anodising;
  val PowderCoating, c_PowderCoating;
  val Fabrication, c_Fabrication;
  val Accessories, c_Accessories;
  val Dies, c_Dies;
  val Others, c_Others;
  val CostCover, c_CostCover;
  val Extrusions, c_Extrusions;
  val t;
  val TotalCost;
  val r11,r14_17, c_r11,cA_r14_17,cP_r14_17;
  val spread, c_spread;
  
  string 20 fromcust,tocust;
  string 20 fromcat,tocat;
  
  record ExportAutoBlock ExportAutoBl;
  integer rwnr,x;
  val v,v1;
  row MetalPriceBlock MetalPricerw;
  date dispatchd,orderd;
  LongInt days;
  record CountryVc Countryr;
  string 5 t1,t2,c117,c118,c119;
  record IVVc oldIVr;
  val AddTreatment;
  record UserVc Userr;
  integer dev;
  val v9,fprice;
  boolean lres;
  
  BlockLoad(ExportAutoBl);
  
  
  dev = ExportAutoBl.DSeparator;
  
  LastYear = GetYear(RepSpec.sStartDate) - 1;
  ThisYear = GetYear(RepSpec.sStartDate);
  
  fromcust = FirstInRange(RepSpec.f1,20);
  tocust = LastInRange(RepSpec.f1,20);
  fromcat = FirstInRange(RepSpec.ObjStr,20);
  tocat = LastInRange(RepSpec.ObjStr,20);
  
  TrHs = true;
  IVr.InvDate  = RepSpec.sStartDate;
  while LoopKey("InvDate",IVr,1,TrHs) begin
    test = true;
    if (IVr.InvDate>RepSpec.sEndDate) then begin 
      test = false;
      TrHs = false;
    end;
    if (IVr.OKFlag!=1) then begin 
      test = false;
    end; 
    if (nonblank(RepSpec.f1)) then begin
      if (IVr.CustCode<fromcust) or (IVr.CustCode>tocust) then begin 
        test = false;
      end;
    end;  
    if test then begin
      CUr.Code = IVr.CustCode;
      if ReadFirstMain(CUr,1,true) then begin 
        if nonblank(RepSpec.ObjStr) then begin
          if (fromcat<CUr.CustCat) or (tocat>CUr.CustCat)  then begin
            test = false;
          end;  
        end;  
        if (nonblank(RepSpec.f4)) then begin
          if (SetInSet2(RepSpec.f4,CUr.Classification)==false) then begin
            test = false;
          end;
        end;     
        if (CUr.CUType==0) then begin test = false; end;  
      end else begin 
        test = false;  
      end;   
    end;
    if nonblank(RepSpec.f5) then begin 
      if (SetInSet(RepSpec.f5,IVr.SalesMan)==false) then begin 
        test = false;
      end;
    end;
    if (IVr.Invalid==1) then begin
      test = false;
    end;
    if (IVr.InvType==kInvoiceTypeDownpayment) then begin
      test = false;
    end;
    if test then begin
      if (IVr.InvType==3) then begin 
        k = -1;
      end else begin 
        k = 1;  
      end;
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
          if nonblank(IVrw.ArtCode) and (IVrw.Quant!=0) then begin
            sold   = true;
            item   = IVrw.ArtCode;
            lres = GetItemTel2016(fprice,AddTreatment,ExportAutoBl,INr,item,itype,ikoef,Anodising,PowderCoating,Fabrication,RepSpec.sStartDate,RepSpec.sEndDate,IVr.InvDate,IVrw.Quant*k,dat1,ThisYear,LastYear); 
            kog1   = IVrw.Quant * k;
            kog2   = IVrw.UnitFactQuant * k;
            sumval = k * MulRateToBase1(IVr.CurncyCode, IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            novat  = sumval;
            cost   = IVrw.BasePrice * IVrw.Quant * k;
            gp = c_novat - c_cost;
            CalcGPProc(gp,c_novat,tstr);
            TotalSales_tons = sumval/1000;
            TotalCost  =  cost/1000;
            
            avpr1 =  (novat - val31)/(ikoef*kog1);

            r11 =  (cost - val31)/(ikoef*kog1);
            r14_17 = (kog1 * INr.Perimeter)/1000; //R14, R17
           
            if (Anodising!=0) then begin 
              cA_r14_17 = cA_r14_17 + r14_17;
              tA_r14_17 = tA_r14_17 + r14_17;
            end;  
            if (PowderCoating!=0) then begin 
              cP_r14_17 = cP_r14_17 + r14_17;
              tP_r14_17 = tP_r14_17 + r14_17;
            end;  
            spread = blankval;
            if (INr.Spread!=0) then begin 
              spread = INr.Spread * kog2;
            end;  
            //return in m2 - main unit!!!
            //nk QtyInTons  =  (IVrw.Quant * ikoef  * k)/1000; //qty in Tons
              
            //metal QtyInTons SMrw_1CredVal2 SMrw_1CredVal
            if (Left(itype,1) == "M") then begin
              // Qty in Tons
              //nk QtyInTons_M = (IVrw.Quant * ikoef * k)/1000;
            end;
            Accessories = blankval;
            Dies        = blankval;
            Others      = blankval;
            //accessories 
            if (Left(itype,1) == "A") then begin
              Accessories = sumval; //  /1000 ???
            end;

            //dies 
            if (Left(itype,1) == "D") then begin
              Dies = sumval; // /1000 ???
            end;
            
            //others
            if (Left(itype,1) == "O")  then begin
              Others = sumval;   // /1000 ???
            end;
            
            // Cost Cover 
            CostCover = (IVrw.rowGP * k); // /1000;
            // (3) PT codes total + others,access,fabric
            val31 = blankval;
            val31 = val31 + Anodising;
            val31 = val31 + PowderCoating;
            val31 = val31 + Fabrication;
// 8. Revenue basic = (hikuhind Arvelt - Artikli Tekstid osa PTFA) x "kogus 1Ó Arvelt

            //14.11.17 Extrusions = r11*kog1; //Extrusion Revenue R22
            
            /* 
            8. Revenue Basic = (hikuhind arvelt Ð artiklikaardilt keelekoodide alt 
            PTFA Ð PTNA5-PTNA1-PTNA2-PTGD-PTHX1-PTHX3-PTHX5-PTPC-PTCR-PTHMWÑPTHXR)
            *kogus1 arvelt
            */
            //LogText(0,IVr.SerNr & "/" & IVrw.ArtCode & "/" & Fabrication);
            Extrusions = novat - Fabrication; //Extrusion Revenue R22
            if (outtype == "report") then begin 
            if (RepSpec.ArtMode==1) then begin 
              //if true then begin 
              if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
                StartFormat(15);
                OutString(0,0,CUr.Code,false); 
                OutString(10,0,CUr.Name,false); 
                OutString(20,0,CUr.SalesMan,false);
                //OutString(30,0,CUr.Classification,false);
                OutString(40,0,item,false);
                OutVal(50,0,kog2,M4Val,true);
                //OutVal(120,0,kog,M4Val,true); 
                OutVal(60,0,novat,M4Val,true);
                OutVal(70,0,novat-cost,M4Val,true); 
                OutString(80,0,tstr,true);  
                //koef is taken from item card  , no totals  
                OutVal(90,0,avpr1,M4Val,true); //9  Sales Kg Price //average price  R10 
                OutVal(100,0,r11,M4Val,true); //10 R11 ??? //purchase kg price
                OutVal(110,0,spread,M4Val,true); 
                
                //Anodising
                OutVal(120,0,Anodising,M4Val,true); 
                if (Anodising!=0) then begin 
                  OutVal(130,0,r14_17,M4Val,true); 
                  OutVal(140,0,Anodising/r14_17,M4Val,true); //13 R15 //Anod m2
                end else begin
                  OutString(130,0,"",true); 
                  OutString(140,0,"",true); 
                end;  
                
                //Powder coating
                OutVal(145,0,PowderCoating,M4Val,true); 
                if (PowderCoating!=0) then begin 
                  OutVal(150,0,r14_17,M4Val,true); 
                  OutVal(160,0,PowderCoating/r14_17,M4Val,true); //13 R15 //Anod m2
                end else begin
                  OutString(150,0,"",true); 
                  OutString(160,0,"",true); 
                end;  
            
                OutVal(170,0,Accessories,M4Val,true);  //17
                OutVal(180,0,Dies,M4Val,true);         //18
                OutVal(190,0,Others,M4Val,true);       //19
                OutVal(200,0,Extrusions,M4Val,true);   //20
                OutLongInt(210,"DblIVVc",IVr.SerNr,false);  //21
                OutString(220,0,INr.Group,true);               //22
                OutString(230,0,CUr.Classification,true);   //23
                EndFormat;
              
              end else begin
             
                StartFormat(15);
                OutString(0,"DblINVc",item,false); //4 R4
                OutVal(50,0,kog2,M4Val,true); //5 R5 //Volume in KG
                //OutVal(120,0,kog,M4Val,true); // R6  NOT IN KEILI's SPETS
                OutVal(80,0,novat,M4Val,true); // R7 //Total Revenue
                OutVal(110,0,novat-cost,M4Val,true); //7 R8 //Gross Margin 
                OutString(140,0,tstr,true);   //8 R9 //Gross Margin %
                //koef is taken from item card  , no totals  
                OutVal(170,0,avpr1,M4Val,true); //9  Sales Kg Price //average price  R10 
                OutVal(200,0,r11,M4Val,true); //10 R11 ??? //purchase kg price
                OutVal(220,0,spread,M4Val,true); //Spread
                //Anodising
                OutVal(250,0,Anodising,M4Val,true); //11 R13  //Anod Revenue
                OutVal(270,0,Anodising/r14_17,M4Val,true); //13 R15 //Anod m2
                //Powder coating
                OutVal(290,0,PowderCoating,M4Val,true); //14  //Paint Revenue
                OutVal(310,0,PowderCoating/r14_17,M4Val,true); //Paint m2 price
                OutVal(330,0,Accessories,M4Val,true);  //17
                OutVal(350,0,Dies,M4Val,true);         //18
                OutVal(370,0,Others,M4Val,true);       //19
                OutVal(400,0,Extrusions,M4Val,true);   //20
                //11.10.2016
                OutString(410,"DblCUVc",CUr.Code,false); 
                OutLongInt(450,"DblIVVc",IVr.SerNr,false);  //21
                OutString(1,0,INr.Group,true);               //22
                //OutString(1,0,CUr.Classification,true);   //23
                EndFormat;
              end;
              
            end else begin 
              StartFormat(15);
              OutString(0,"DblCUVc",CUr.Code,false); 
              OutString(50,0,CUr.SalesMan,false); 
              OutString(80,0,CUr.Name,false); //? 
              OutVal(180,0,kog2,M4Val,true); 
              OutVal(210,0,Fabrication,M4Val,true); 
              OutVal(240,0,Anodising,M4Val,true);
              OutVal(270,0,r14_17,M4Val,true); 
              OutVal(300,0,Anodising/r14_17,M4Val,true)
              //Paint
              OutVal(330,0,PowderCoating,M4Val,true); 
              OutVal(360,0,r14_17,M4Val,true); 
              OutVal(390,0,PowderCoating/r14_17,M4Val,true); 
              OutVal(420,0,spread,M4Val,true); 
              OutVal(450,0,novat,M4Val,true);  //total revenue excl taxes
              OutString(1,0,CUr.Classification,true); 
              EndFormat;  
            end;
            end; //report
            if (outtype == "export") then begin 
              tstr = ExportAutoBl.CUStart & IVr.SerNr;
              rwnr = i + 1;
              tstr = tstr & rwnr;
              
              S_Export(tstr,dev); //1
              
              tstr = "";
              if blankdate(IVr.SExportDate) then begin 
                tstr = "A";
              end else begin
                tstr = "M";
              end;
              S_Export(tstr,dev); // 2
              
              tstr = IVr.SerNr;
              S_Export(tstr,dev); // 3
              
              tstr = rwnr;
              S_Export(tstr,dev); // 4
              S_ExportVal(kog2,dev); // 5
              
              S_EmptyString(dev); //6 fix 21.11
              
              
              S_ExportVal(novat,dev); // 7
              v = 0;
              
              //probably Fabrication, not Anodising
              if (Fabrication!=0)  then begin v = Fabrication;  end;
              if (PowderCoating!=0) then begin v = PowderCoating; end;
              if (INr.Group=="A") or (INr.Group=="O") or (INr.Group=="D") then begin 
                v1 = novat-v-novat;
              end else begin 
                v1 = novat-v-AddTreatment;
              end; 
              //15.12S_ExportVal(Extrusions,dev); // 8
              S_ExportVal(v1,dev); // 8
              //cust start 20.03.2018
              //9. veerg "Revenue surface treatment" = Uus vli ÒAnod hind/m2Ó Arve kaardilt x Artikli kaardilt ÒPerimeeterÓ vrtus / 1000
//9. veerg "Revenue surface treatment" = Uus vli ÒAnod hind/m2Ó Arve realt x Artikli kaardilt ÒPerimeeterÓ vrtus / 1000 x Kog1 Arve realt
           
           
           
              //cust start 19.10.2018
              v9 = 0;
              //1-variant
              if (lres==true) then begin 
                v9 = (IVrw.AnodPrice * INr.Perimeter/1000) * IVrw.Quant;
              end else begin
                if (fprice!=0) then begin
                  v9 = (fprice/INr.Perimeter) * 1000;
                end;
              end;    
              //2-variant
              if (IVrw.AnodPrice==0) then begin 
                v9 = (fprice/INr.Perimeter) * 1000;
              end;
              //3-variant
              if (INr.Spread!=0) then begin 
                v9 = (IVrw.AnodPrice * INr.Perimeter/1000) * (INr.Spread/1000) * IVrw.Quant;
                //4-variant
                if (IVrw.AnodPrice==0) or (lres==false) then begin 
                  if (fprice!=0) then begin
                    v9 = (fprice * INr.Perimeter/1000) * (INr.Spread/1000) * IVrw.Quant;
                  end;
                end;
              end;  
              
              
              S_ExportVal(v9,dev);
              //cust end
         //cust     S_ExportVal(v,dev); // 9
              //temp
              S_Export("",dev); //10
              
              v = Accessories + Dies + Others;
//11. Revenue other additional treatment= Artikli Tekstid osa PTFA x "kogus 1Ó Arvelt
              //15.12
              if (INr.Group=="A") or (INr.Group=="O") or (INr.Group=="D") then begin 
                S_ExportVal(novat,dev); // 11
              end else begin 
                S_ExportVal(AddTreatment,dev); // 11
              end;   
              
              for (x=1;x<=7;x=x+1) begin
                S_EmptyString(dev); //12,13,14...18
              end; 
              v = 0;
              if FindMetalPrice(IVr.TransDate,MetalPricerw) then begin 
                v = MetalPricerw.MetalPrice * kog2;
                S_ExportVal(v,dev); // 19
                S_EmptyString(dev); //20
                v = MetalPricerw.BilletPremium * kog2;
                S_ExportVal(v,dev); // 21
              end else begin 
                S_ExportVal(v,dev); // 19
                S_EmptyString(dev); //20
                S_ExportVal(v,dev); // 21
              end;
              for (x=1;x<=16;x=x+1) begin
                S_EmptyString(dev); //22,23,24...37
              end; 
              tstr = SapaCheckOrder(IVr,dispatchd,orderd);
              S_Export(tstr,dev); // 38
              S_Export("1",dev); // 39
              days = DateDiff(dispatchd,orderd);
              if (days>=0) then begin 
                tstr = days;
              end else begin
                tstr = 0;
              end;  
              S_Export(tstr,dev); // 40
              for (x=1;x<=5;x=x+1) begin
                S_EmptyString(dev); //41...45
              end; 
              S_Export("1",dev); // 46
              S_EmptyString(dev); //47
              S_Export(ExportAutoBl.CUStart & IVr.CustCode,dev); // 48
              S_EmptyString(dev); //49
              S_EmptyString(dev); //50
              tstr = "";
              //11.01.2017
              //if nonblankdate(dispatchd) then begin
                tstr = DateToString(IVr.InvDate,"YYYYMMDD");
              //end;  
              S_Export(tstr,dev); // 51
              S_Export(tstr,dev); // 52
              S_Export(tstr,dev); // 53
              Userr.Code = IVr.SalesMan;
              if ReadFirstMain(Userr,1,true) then begin 
                S_Export(Userr.DV1,dev); // 54
                S_Export(Userr.DV2,dev); // 55
                S_Export(Userr.DV3,dev); // 56
              end else begin 
                S_Export("",dev); // 54
                S_Export("",dev); // 55
                S_Export("",dev); // 56  
              end;

              S_Export(ExportAutoBl.LC1,dev); // 57
              S_Export(ExportAutoBl.LC2,dev); // 58
              S_Export(INr.DefaultSource,dev); //59
              /*
              for (x=1;x<=8;x=x+1) begin
                S_EmptyString(dev); //60...67
              end; 
              */
              //cust start 16.01.2017
              S_EmptyString(dev); //60
              S_EmptyString(dev); //61
              S_EmptyString(dev); //62
              S_EmptyString(dev); //63
              S_Export(INr.PG1,dev); // 64
              S_Export(INr.PG2,dev); // 65
              S_EmptyString(dev); //66
              S_EmptyString(dev); //67
              //cust end 16.01.2017
                            
              t1 = ""; t2 = "";
              
              Countryr.Code = IVr.InvCountry;
              if ReadFirstMain(Countryr,1,true) then begin 
                t1 = Countryr.D1AQCD;
                t2 = Countryr.D2ARCD;
              end;
              S_Export(t1,dev); // 68
              S_Export(t2,dev); // 69
              S_EmptyString(dev); //70
              S_EmptyString(dev); //71
              S_Export("1",dev); //72
              S_EmptyString(dev); //73
              
              S_Export("EUR",dev); // 74
              S_EmptyString(dev); //75
              S_Export(IVr.CurncyCode,dev); // 76
              for (x=1;x<=18;x=x+1) begin
                S_EmptyString(dev); //77...94
              end; 
              
              v = 0;
              if (IVr.InvType == 3) then begin 
                v = sumval; 
              end;
              S_ExportVal(v,dev); //95
              S_EmptyString(dev); //96
              
              v = 0;
              if (IVr.InvType == 3) then begin 
                v = INr.Weight * IVrw.Quant;
              end; 
              S_ExportVal(v,dev); //97
              for (x=1;x<=17;x=x+1) begin
                S_EmptyString(dev); //98...115
              end; 
              S_EmptyString(dev); //117

              //v = (INr.Perimeter *IVrw.Quant)/1000;
              
// (Artikli kaardilt "Perimeeter" vrtus / 1000) x "kogus1
               //v = (IVrw.AnodPrice * INr.Perimeter/1000) * IVrw.Quant;
              v = (INr.Perimeter/1000) * IVrw.Quant;

              //VARIANT 2:
              if (INr.Spread!=0) then begin 
                v = (INr.Perimeter/1000) *  IVrw.Quant* (INr.Spread/1000);
              end; 
              
              
              S_ExportVal(v,dev); //116
              if (PowderCoating!=0) then begin 
                S_Export("1",dev); //117
              end else begin
                S_EmptyString(dev);
              end;
              if (Fabrication!=0) then begin 
                S_Export("1",dev); //118
              end else begin
                S_EmptyString(dev);
              end;

              CheckItemSapa(INr,c117,c118,c119);
              S_Export(c119,dev); // 119
              for (x=1;x<=35;x=x+1) begin
                S_EmptyString(dev); //120...154
              end; 
             // S_Export("NEW",dev); 

              NewLine;
            end;   
            cuPrinted = true;
            c_avpr1 = c_avpr1 + avpr1;
            t_avpr1 = t_avpr1 + avpr1;
            t_r11 = t_r11 + r11;
            c_r11 = c_r11 + r11;
            
            c_spread = c_spread + spread;
            t_spread = t_spread + spread;
            
            //c_val31 = c_val31 + val31;
            //t_val31 = t_val31 + val31;
             
            c_kog1   = c_kog1   + kog1;
            c_kog2   = c_kog2   + kog2;
            c_sumval = c_sumval + sumval;
            c_novat  = c_novat  + novat;
            c_cost   = c_cost   + cost;
            
            //t_kog1   = t_kog1   + kog1;
            t_kog2   = t_kog2   + kog2;
            //t_sumval = t_sumval + sumval;
            t_novat  = t_novat  + novat;
            t_cost   = t_cost   + cost;
                      
            t_Anodising     = t_Anodising + Anodising;
            t_PowderCoating = t_PowderCoating + PowderCoating;
            t_Accessories   = t_Accessories + Accessories;
            t_Dies          = t_Dies + Dies;
            t_Others        = t_Others + Others;
            t_Extrusions    = t_Extrusions + Extrusions;
            t_Fabrication   = t_Fabrication + Fabrication;
            
            c_Anodising     = c_Anodising + Anodising;
            c_PowderCoating = c_PowderCoating + PowderCoating;
            c_Accessories   = c_Accessories + Accessories;
            c_Dies          = c_Dies + Dies;
            c_Others        = c_Others + Others;
            c_Extrusions    = c_Extrusions + Extrusions;            
          end;
        end;
      end; //for
      
      if (outtype == "export") then begin 
        RecordCopy(oldIVr,IVr);
        IVr.SExportDate = CurrentDate;
        RecordUpdate(oldIVr,IVr,false);

      end;
   
    end; //test
  end; //while
 
  return;
end;  



function val SAPAFindItemSalesman(string salesman,string item,date sDate,date eDate)
begin
  record IUSVc IUSr;
  boolean res;
  Boolean foundf;
  val totqty;
  
  res = false;
  IUSr.UserCode = salesman;
  IUSr.ArtCode = item;
  foundf = ReadFirstMain(IUSr,2,false);
  if (Left(IUSr.ArtCode,len(item))<>item) then begin
    foundf = false;
  end;
  if (IUSr.UserCode<>salesman) then begin
    foundf = false;
  end;
  if (foundf) then begin
    IUSr.ArtCode = item;
    totqty = GetTurnover(IUSr,"quant",sDate,eDate);
  end;
  SAPAFindItemSalesman = totqty;
  return;
end;



procedure SAPA_PrintHeaderCuArt(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 20 fromcust,tocust;
  
  fromcust = FirstInRange(RepSpec.f1,20);
  tocust = LastInRange(RepSpec.f1,20);

  rw = 1;  
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;

  HTCusts(fromcust,tocust,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  
  HTCustCat(RepSpec.ObjStr,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  
  HTCustClass(RepSpec.f4,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
   
  HTSaleMan(RepSpec.f5,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  EndHeader;

  if (RepSpec.ArtMode==0) then begin
    
      //Gray_Divider(0,1);
      StartFormat(15);
      OutString(0,0,"Customer Code",false); 
      OutString(50,0,"AM",false); 
      OutString(80,0,"Customer Name",false); //? 
      OutString(180,0,"Volume",true); 
      OutString(210,0,"Fabric.Rev.",true); 
      OutString(240,0,"Anod.Rev.",true);
      OutString(270,0,"Anod m2",true); 
      OutString(300,0,"Anod pr/m2",true)
      //Paint
      OutString(330,0,"Paint Rev.",true); 
      OutString(360,0,"Paint m2",true); 
      OutString(390,0,"Paint pr/m2",true); 
      
      OutString(420,0,"Length",true); 
      OutString(450,0,"Total Rev.",true);  //total revenue excl taxes
      OutString(1,0,"EAA Code",true); 
      EndFormat;
     // StartFormat(15);
     // EndFormat;
    
  end;
  if (RepSpec.ArtMode==1) then begin
    //if true then begin
    if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
      StartFormat(15);
      OutString(0,0,"Customer",false); 
      OutString(10,0,"Customer Name",false); 
      OutString(20,0,"AM",false);
      //OutString(30,0,CUr.Classification,false);
      OutString(40,0,"Extr. No",false);
      OutString(50,0,"Volume",true);
      //OutVal(120,0,kog,M4Val,true); 
      OutString(60,0,"Total Revenue",true);
      OutString(70,0,"Gross Margin",true); 
      OutString(80,0,"GM %",true);  
      
      OutString(90,0,"Sales Kg Price",true); //9  Sales Kg Price //average price  R10 
      OutString(100,0,"Purch Kg Price",true); //10 R11 ??? //purchase kg price
      OutString(110,0,"Length EUR/kgW",true); 
                
      //Anodising
      OutString(120,0,"Anod Rev",true); 
      OutString(130,0,"Anod m2",true); 
      OutString(140,0,"Anod price/m2",true); //13 R15 //Anod m2
                  
      //Powder coating = Paint
      OutString(145,0,"Paint Rev",true); 
      OutString(150,0,"Paint m2",true); 
      OutString(160,0,"Paint price/m2",true); //13 R15 //Anod m2
            
      OutString(170,0,"Accessories Rev",true);  //17
      OutString(180,0,"Dies Rev",true);         //18
      OutString(190,0,"Others Rev",true);       //19
      OutString(200,0,"Extrusions Rev",true);   //20
      OutString(210,0,"Invoice no.",false);  //21
      OutString(220,0,"Type of extr",true);               //22
      OutString(230,0,"EAA code",true);   //23
      EndFormat;
    end else begin         
      StartFormat(15);
      OutString(0,0,"Extr.No",false); //4 R4
      OutString(50,0,"Volume",true); //5 R5 //Volume in KG
      OutString(80,0,"Tot.Rev.",true); // R7 //Total Revenue
      OutString(110,0,"GM",true); //7 R8 //Gross Margin
      OutString(140,0,"GM %",true);   //8 R9 //Gross Margin %
      OutString(170,0,"Sales kg Pr",true); //9  Sales Kg Price //average price  R10 
      OutString(200,0,"Purch kg Pr",true); //10 R11 ??? //purchase kg price
      OutString(226,0,"Length eur/kg",true); //10 R11 ??? //purchase kg price
      OutString(250,0,"Anod.Rev",true); //11 R13  //Anod Revenue
      OutString(270,0,"Anod m2",true); //13 R15 //Anod m2
      OutString(290,0,"Paint Rev",true); //14  //Paint Revenue
      OutString(316,0,"Paint m2",true); //Paint m2 price
      OutString(330,0,"Access.Rev",true);  //17
      OutString(350,0,"Dies Rev",true);         //18
      OutString(370,0,"Others Rev",true);       //19
      OutString(400,0,"Extr.Rev",true);   //20
      OutString(410,0,"Customer",false);   //20
      OutString(440,0,"Invoice no.",false); //21
      OutString(1,0,"Extr.Type",true);            //22
      EndFormat;
    end;  
    
  end;

  return;
end;
  

global updating
procedure SapaSalesRn(record RcVc RepSpec)
begin
  record CUVc CUr;

  Boolean catflag,catfound;
  Boolean matchf,printedf,firstf;
  Boolean testf,TrHs;
  Boolean cuPrinted;
  val t_kog2;
  val t_novat;
  val t_r11;
  val t_spread;
  val t_Anodising;
  val t_PowderCoating;
  val t_Dies;
  val t_Others;
  val t_Extrusions;
  val t_Fabrication;
  val t_cost;
  val t_Accessories;
  val tA_r14_17,tP_r14_17;
  val gp;
  val t_avpr1;
  string 255 tstr;
  
//  RepSpec.Stext = RepSpec.sStartDate2 & ":" & RepSpec.sEndDate2;
//only when reportnigperiods on
  catflag = false;
  catfound = false;


  StartReportJob("Sales Report"); 
  SAPA_PrintHeaderCuArt(RepSpec);

  //temp PrintStrings(RepSpec);
  Gray_Divider(0,1);
  /*CUr.Code = fromcust;
  TrHs = true;
  while LoopMain(CUr,1,TrHs) begin
    testf = true;
    if (nonblank(tocust)) then begin
      if (CUr.Code>tocust) then begin
        TrHs  = false;
        testf = false;
      end;
    end;
    if nonblank(RepSpec.ObjStr) then begin
      if (fromcat<CUr.CustCat) or (tocat>CUr.CustCat)  then begin
        testf = false;
      end;  
    end;  
    if (nonblank(RepSpec.f4)) then begin
      if (SetInSet2(RepSpec.f4,CUr.Classification)==false) then begin
        testf = false;
      end;
    end;     
    if (CUr.CUType==0) then begin testf = false; end;   
    if (testf) then begin
      cuPrinted = PrintItemDet(RepSpec,CUr,t_kog2,t_novat,t_r11,t_spread,t_Anodising,t_PowderCoating,t_Dies,t_Others,t_Extrusions,t_Fabrication,t_Accessories,t_cost,tA_r14_17,tP_r14_17,t_avpr1);
    end;
  end;
  */
  
  cuPrinted = S_PrintItemDetAll("report",RepSpec,t_kog2,t_novat,t_r11,t_spread,t_Anodising,t_PowderCoating,t_Dies,t_Others,t_Extrusions,t_Fabrication,t_Accessories,t_cost,tA_r14_17,tP_r14_17,t_avpr1);

  Black_Divider(0,1);
  //Print Totals
  if (RepSpec.ArtMode==1) then begin 
    Gray_Divider(0,1);
    gp = t_novat - t_cost; 
    CalcGPProc(gp,t_novat,tstr); 
    if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
      StartFormat(15);
      OutString(0,0,"TOTAL",false); 
      OutString(10,0,"",false); 
      OutString(20,0,"",false);
      //OutString(30,0,"",false);
      OutString(40,0,"",false);
      OutVal(50,0,t_kog2,M4Val,true);
      //OutVal(120,0,kog,M4Val,true); 
      OutVal(60,0,t_novat,M4Val,true);
      OutVal(70,0,t_novat-t_cost,M4Val,true); 
      OutString(80,0,tstr,true);  
      //koef is taken from item card  , no totals  
      OutVal(90,0,t_avpr1,M4Val,true); //9  Sales Kg Price //average price  R10 
      OutVal(100,0,t_r11,M4Val,true); //10 R11 ??? //purchase kg price
      OutVal(110,0,t_spread,M4Val,true); 
      //Anodising
      OutVal(120,0,t_Anodising,M4Val,true); 
      if (t_Anodising!=0) then begin 
        OutVal(130,0,tA_r14_17,M4Val,true); 
        OutVal(140,0,t_Anodising/tA_r14_17,M4Val,true); //13 R15 //Anod m2
      end else begin
        OutString(130,0,"",true); 
        OutString(140,0,"",true); 
      end;  
      //Powder coating
      OutVal(145,0,t_PowderCoating,M4Val,true); 
      if (t_PowderCoating!=0) then begin 
        OutVal(150,0,tP_r14_17,M4Val,true); 
        OutVal(160,0,t_PowderCoating/tP_r14_17,M4Val,true); //13 R15 //Anod m2
      end else begin
        OutString(150,0,"",true); 
        OutString(160,0,"",true); 
      end;  
      OutVal(170,0,t_Accessories,M4Val,true);  //17
      OutVal(180,0,t_Dies,M4Val,true);         //18
      OutVal(190,0,t_Others,M4Val,true);       //19
      OutVal(200,0,t_Extrusions,M4Val,true);   //20
      //OutLongInt(210,"DblIVVc",IVr.SerNr,false);  //21
      //OutString(220,0,itemtype,true);               //22
      //OutString(230,0,CUr.Classification,true);   //23
      EndFormat;
    end else begin     
      StartFormat(15);
      OutString(0,0,"Total Customer",false); //4 R4
      OutVal(50,0,t_kog2,M4Val,true); //5 R5 //Volume in KG
      OutVal(80,0,t_novat,M4Val,true); // R7 //Total Revenue
     

      OutVal(110,0,gp,M4Val,true); //7 R8 //Gross Margin
      OutString(140,0,tstr,true);   //8 R9 //Gross Margin %
    
      //OutVal(200,0,t_avpr1,M4Val,true); //9  Sales Kg Price //average price  R10
      OutString(170,0,"",true);
      OutVal(200,0,t_r11,M4Val,true); //10 R11 ??? //purchase kg price
      OutVal(220,0,t_spread,M4Val,true); //10 R11 ??? //purchase kg price
      // r14_17 = (kog1 * INr.Perimeter)/1000; //R14, R17
      //Anodising
      OutVal(250,0,t_Anodising,M4Val,true); //11 R13  //Anod Revenue
      //OutVal(330,0,Anodising/r14_17,M4Val,true); //13 R15 //Anod m2
      OutString(270,0,"",true); //

      //Powder coating
      OutVal(290,0,t_PowderCoating,M4Val,true); //14  //Paint Revenue
      //OutVal(360,0,PowderCoating/r14_17,M4Val,true); //Paint m2 price
      OutString(310,0,"",true); //
    
      OutVal(330,0,t_Accessories,M4Val,true);  //17
      OutVal(350,0,t_Dies,M4Val,true);         //18
      OutVal(370,0,t_Others,M4Val,true);       //19
    
      //Extrusions = r11* kog1; //Extrusion Revenue R22
      OutVal(400,0,t_Extrusions,M4Val,true);   //20
      //OutLongInt(430,"DblIVVc",IVr.SerNr,false); //21
      //OutString(1,0,INr.Group,true);            //22
      //OutString(1,0,CUr.Classification,true);   //23
      EndFormat;
    end;  
    StartFormat(15);
    EndFormat;
  end;
  if (RepSpec.ArtMode==0) then begin
    //Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,"TOTAL",false); 
    OutString(50,0,"",false); 
    OutString(80,0,"",false); //? 
    OutVal(180,0,t_kog2,M4Val,true); 
    OutVal(210,0,t_Fabrication,M4Val,true); 
    OutVal(240,0,t_Anodising,M4Val,true);
    OutVal(270,0,tA_r14_17,M4Val,true); 
    OutVal(300,0,t_Anodising/tA_r14_17,M4Val,true)
    //Paint
    OutVal(330,0,t_PowderCoating,M4Val,true); 
    OutVal(360,0,tP_r14_17,M4Val,true); 
    OutVal(390,0,t_PowderCoating/tP_r14_17,M4Val,true); 
    OutVal(420,0,t_spread,M4Val,true); 
    OutVal(450,0,t_novat,M4Val,true);  //total revenue excl taxes
    OutString(1,0,"",true); 
    EndFormat;
  end;
  
  EndJob;
  return;
end;
