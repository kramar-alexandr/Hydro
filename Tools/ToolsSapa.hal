external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);


function integer CheckMatchTel(string swhere, string swhat)
begin
  integer i;
  integer est;
  
  est = 0;
  for (i=1;i<=len(swhere);i=i+1) begin
    if (CharacterMatch(swhere,swhat,i)) begin
      est = i;
      i = len(swhere);
    end;
  end;
  CheckMatchTel = est;
  return;
end;

global
function val  GetAnodPrice(record INVc INr ,date RegDate,var val fprice)
begin
  row INVc INrw;
  integer lcnt,l;
  integer rwcnt,i;
  integer p,k,x;
  date sdate,edate;
  date ContrDate,fdate;
  val ContrPrice,res;
  date bldate;
  boolean test;
  date lyeard1,lyeard2,dat1;
  string 10 std;

  record LangBlock Langr;
  row LangBlock Langrw;
  
  fprice = blankval;
  
    lcnt = MatRowCnt(INr);
    BlockLoad(Langr);
    rwcnt = MatRowCnt(Langr);

    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(Langr,i,Langrw);
      ContrPrice = blankval;
      fprice = blankval;

      if (Left(Langrw.Code,2) ==  "PT") then begin
        if (Langrw.Code!="PTAL") and (Langrw.Code!="PTFA")  then begin
          for (l=0;l<lcnt;l=l+1) begin
            MatRowGet(INr,l,INrw);
            if (INrw.LangCode ==  Langrw.Code) then begin
              x = CheckMatchTel(INrw.Text,"/");
              if (x==0) then begin
                edate = CurrentDate;
              end else begin
                edate = StringToDate(Mid(INrw.Text,x,10));
              end;
              if blankdate(sdate) then begin 
                sdate = edate;
              end;  
              test = true;

             // LogText(0,"fdate: " & fdate & " / ContrDate: " &  ContrDate & " / RegDate: " &  RegDate);
              
              if DateInRange(RegDate,sdate,edate)==false then begin 
                test = false; 
                sdate = AddDay(edate,1);
              end;
              
              if test then begin
                ContrPrice = StringToVal(INrw.Text,M4Val);
                fprice = ContrPrice;
                goto LGetAnodPrice;
              end;
            end;
          end;
        end;
      end;
    LGetAnodPrice:;
      if fprice>0 then begin
        i  = rwcnt; 
      end;
    end;  
    if fprice>0 then begin
      res = (fprice/INr.Perimeter) * 1000;
    end;
  GetAnodPrice = res;
  return;
end;  


global
procedure HeadLin(var integer r)
begin
  record ITVc ITr;
  string 10 colname1,colname2,colname3,colname4;

  ResetLoop(ITr);
  r = 0;
  while (LoopMain(ITr,1,true)) begin
    if (Left(ITr.Code,1) == "M") then begin
      if (Left(ITr.Code,2) == "MS") then begin
        colname1 = "Standard";

        if r==0 then begin r = 1; end;
      end;
      if (Left(ITr.Code,2) == "MC") then begin
        colname2 ="Customer";

        if r<=1 then begin r = 2; end;
      end;

      if (Left(ITr.Code,2) <> "MC") and (Left(ITr.Code,2) <> "MS") then begin
        if blank(colname3) then begin
          colname3  = Left(ITr.Comment,10);

          if r<=2 then begin r = 3; end;
        end;
        if blank(colname4) and ( colname3  <> Left(ITr.Comment,10) )then begin
          colname4  = Left(ITr.Comment,10);

          if r<=3 then begin r = 4; end;
        end;
      end;
    end;
  end;
  if r >=1 then begin OutString(180,0,colname1,true);  end;
  if r >=2 then begin OutString(240,0, colname2,true); end;
  if r >=3 then begin OutString(300,0, colname3,true); end;
  if r >=4 then begin OutString(360,0, colname4,true); end;
  return;
end;

global
procedure GetItemTel(string icode,var string itemtype,var val koef,var record SMVc SMr,date sdate,date edate,Date RegDate,val qty,date d1,LongInt tyear,LongInt lyear)
begin
  record INVc INr;
  row INVc INrw;
  row SMVc SMrw;
  integer lcnt,l;
  integer rwcnt,i;
  integer p,k,x;
  date ContrDate,fdate;
  val ContrPrice,fprice;
  date bldate;
  boolean test;
  date lyeard1,lyeard2,dat1;
  string 10 std;

  record LangBlock Langr;
  row LangBlock Langrw;

  dat1 = StringToDate("01.01." & lyear);
  // 12.12.00
  std = DateToString(sdate,"DD.MM.YYYY");
  std = Left(std,6);
  lyeard1 = dat1;

  std = DateToString(edate,"DD.MM.YYYY");
  std = Left(std,6);
  lyeard2 = StringToDate(std & lyear);

  INr.Code = icode;
  ContrDate = CurrentDate;
  fdate = CurrentDate;
  ResetLoop(INr);
  itemtype = 0;

  if ReadFirstMain(INr,1,true) then begin
    itemtype = INr.Group;
    koef = INr.UnitCoefficient;
    lcnt = MatRowCnt(INr);
    // NEW
    BlockLoad(Langr);
    rwcnt = MatRowCnt(Langr);

    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(Langr,i,Langrw);
      ContrDate  = CurrentDate;
      ContrPrice = 0;
      fprice = 0;
      fdate = CurrentDate;

      if (Left(Langrw.Code,2) ==  "PT") then begin
        if (Langrw.Code <> "PTFA") then begin

          for (l=0;l<lcnt;l=l+1) begin
            MatRowGet(INr,l,INrw);
            if (INrw.LangCode ==  Langrw.Code) then begin
              x = CheckMatchTel(INrw.Text,"/");
              if (x==0) then begin
                fdate = CurrentDate;
              end else begin
                fdate = StringToDate(Mid(INrw.Text,x,10));
              end;
              test = true;
              if (RegDate >fdate) then begin test = false; end;
              if (fdate>ContrDate) then begin test = false; end;
              if test then begin
                ContrDate  = fdate;
                ContrPrice = StringToVal(INrw.Text,M4Val);
                fprice = ContrPrice;
              end;
            end;
          end;
        end;
      end;
      if (ContrPrice <> 0) then begin
       // LogText(0,"INr.Code " & INr.Code & "/" & ContrPrice);
        p = 2;
        if (Langrw.Code == "PTPC")  then begin
          p = 3;
        end;
        if (Langrw.Code == "PTFA")  then begin
          p = 4;
        end;

        MatRowGet(SMr,p,SMrw);
        if (DateInRange(RegDate,sdate,edate)==true) then begin
          SMrw.DebVal = SMrw.DebVal + (ContrPrice*qty/1000);
        end;
        if (GetYear(d1) == lyear) then begin
          if (DateInRange(RegDate,lyeard1,lyeard2) == true) then begin
            SMrw.CredVal2 = SMrw.CredVal2 + (ContrPrice*qty/1000);
          end;
        end;
        if (GetYear(RegDate) == tyear) then begin
          SMrw.CredVal = SMrw.CredVal + (ContrPrice*qty/1000);
        end;
        MatRowPut(SMr,p,SMrw);
      end;
    end;
  // END NEW
  end;
  return;
end;

global
procedure GetThird(var record SMVc SMr, string ordclas ,LongInt lsyear,string customer,val weekkoef)
begin
  record QTVc QTr;
  row QTVc QTrw;
  row SMVc SMrw;
  boolean TrHs,test;
  integer i,rwcnt;
  integer s,srwcnt;
  integer pt;

  srwcnt = MatRowCnt(SMr);

  TrHs = true;
  QTr.QuoteClass = "EL" & ordclas;
  ResetLoop(QTr);
  while (LoopKey("QuoteClass",QTr,1,TrHs)) begin
    test = true;
    if (GetYear(QTr.QTDate) <> lsyear) then begin
       test = false;
    end;
    if nonblank(customer) then begin
      if (QTr.CustCode <> customer) then begin
        test = false;
      end;
    end;
      if (Left(QTr.QuoteClass,4) <> "EL" & Left(ordclas,2)) then begin
      test = false;
      //TrHs = false;
    end;
    if test then begin
      if nonblank(customer) then begin
        TrHs = false;
      end;
      rwcnt = MatRowCnt(QTr);
      for (i = 0 ; i<rwcnt ;i=i+1) begin
        MatRowGet(QTr,i,QTrw);
        pt = 11;
        if QTrw.ArtCode == "BU_NO" then begin
          pt = 0;
        end;
        if QTrw.ArtCode == "BU_QT" then begin
          pt = 1;
        end;
        if QTrw.ArtCode == "BU_NA" then begin
          pt = 2;
        end;
        if QTrw.ArtCode == "BU_PC" then begin
          pt = 3;
        end;
        if QTrw.ArtCode == "BU_FA" then begin
          pt = 4;
        end;
        if QTrw.ArtCode == "BU_AC" then begin
          pt = 5;
        end;
        if QTrw.ArtCode == "BU_DI" then begin
          pt = 6;
        end;
        if QTrw.ArtCode == "BU_OT" then begin
          pt = 7;
        end;
        if QTrw.ArtCode == "BU_CC" then begin
          pt = 9;
        end;
        if QTrw.ArtCode == "BU_OE" then begin
          pt = 10;
        end;
        if pt <> 11 then begin
          MatRowGet(SMr,pt,SMrw);
          SMrw.DebVal2 = SMrw.DebVal2 + QTrw.Sum * weekkoef;
          MatRowPut(SMr,pt,SMrw);
        end;
      end;
    end;
  end;
  return;
end;


global
procedure SumUpInv(Boolean all,var record SMVc SMr,record RcVc RepSpec, var val v1, var val v2, var val v4,date ldate1, date ldate2)
begin
  record IVVc IVr;
  row IVVc IVrw;
  row SMVc SMrw;
  Boolean TrHs1,test,TrHs;
  Date dat1,dat2;
  integer LastYear,ThisYear;
  string 255 tstr;
  string 5 itype;
  integer rw,i,rwcnt,k;
  integer ilan,irow;
  integer weeknumb;
  integer a;
  val ikoef;
  val val21,val22,val23,val24;     // (2) Quantity in tons
  val sumval;
  record ORVc ORr;

  LastYear = GetYear(RepSpec.sStartDate) - 1;
  ThisYear = GetYear(RepSpec.sStartDate);

  if nonblank(RepSpec.f1) then begin
    dat1 = StringToDate("01.01." & ThisYear);
  end else begin
    dat1 = StringToDate("01.01." & LastYear);
  end;
  TrHs1 = true;
  //new 2002
  IVr.InvDate = dat1;
  ResetLoop(IVr);
  while (LoopKey("InvDate",IVr,1,TrHs1)) begin
    test = true;
    if (IVr.Invalid == 1) then begin
      test = false;
    end;
    if (DateInRange(IVr.InvDate, dat1,RepSpec.sEndDate)==false) then begin
      test = false;
    end;
    if (IVr.InvType == 3) then begin
      a = -1;
    end else begin
      a = 1;
    end;
    if nonblank(RepSpec.f1) then begin
      if (RepSpec.f1<>IVr.CustCode) then begin
         test = false;
      end;
    end;

    //cust start
    if (all==false) then begin
      if (IVr.OrderNr>0) then begin
        test = false;
      end;
    end else begin
      if (test==true) then begin
        test = false;
        if (IVr.OrderNr<=0) then begin
          test = true;
        end else begin
          //checking order
          ORr.SerNr = IVr.OrderNr;
          if ReadFirstMain(ORr,1,true) then begin
            if (ORr.OrderClass == RepSpec.f2) then begin
              test = true;
            end;
          end;
        end;
      end;
    end;
    //cust end

    if 	(IVr.Location <> "LADU") then begin
      test = false;
    end;
    if test then begin
      // (3) COLUMN FROM INVOICE
      // number of orders
      MatRowGet(SMr,0,SMrw);
      if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
        SMrw.DebVal = SMrw.DebVal +1;
      end;
      if (GetYear(dat1) == LastYear) then begin
        if (GetYear(IVr.InvDate) == LastYear) then begin
          if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
            SMrw.CredVal2 = SMrw.CredVal2 +1;
          end;
        end;
      end;
      if (GetYear(IVr.InvDate) == ThisYear) then begin
        SMrw.CredVal = SMrw.CredVal +1;
      end;
      MatRowPut(SMr,0,SMrw);

      // ITEM QTY AND SUMS
      rwcnt = MatRowCnt(IVr);
      for (i = 0 ; i<rwcnt ;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        if nonblank(IVrw.ArtCode) then begin
          sumval = a * MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
            v1 = v1 + sumval/1000;
          end;
          if (GetYear(dat1) == LastYear) then begin
            if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
              v4 = v4 + sumval/1000;
            end;
          end;
          if (GetYear(IVr.InvDate) == ThisYear) then begin
            v2 = v2 + sumval/1000;
          end;

          //2002 GetItemTel(IVrw.ArtCode,itype,ikoef,SMr,RepSpec.sStartDate,RepSpec.sEndDate,IVr.InvDate,IVrw.Quant,dat1,LastYear,ThisYear);
          GetItemTel(IVrw.ArtCode,itype,ikoef,SMr,RepSpec.sStartDate,RepSpec.sEndDate,IVr.InvDate,IVrw.Quant,dat1,ThisYear,LastYear);
          //metal
          if (Left(itype,1) == "M") then begin
            // Qty in Tons
            MatRowGet(SMr,1,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + a * IVrw.Quant * ikoef/1000;
              val21 = val21 + a * IVrw.Quant * ikoef/1000;
            end;
            if (GetYear(dat1) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + a * IVrw.Quant * ikoef/1000;
                val24 = val24 + IVrw.Quant * a * ikoef/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + a * IVrw.Quant * ikoef/1000;
              val22 = val22 + IVrw.Quant * a * ikoef/1000;
            end;
            MatRowPut(SMr,1,SMrw);
          end;
          //accessories
          if (Left(itype,1) == "A") then begin
            MatRowGet(SMr,5,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + sumval/1000;
            end;
            if (GetYear(dat1) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + sumval/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + sumval/1000;
            end;
            MatRowPut(SMr,5,SMrw);
          end;
          //dies
          if (Left(itype,1) == "D") then begin
            MatRowGet(SMr,6,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + sumval/1000;
            end;
            if (GetYear(IVr.InvDate) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + sumval/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + sumval/1000;
            end;
            MatRowPut(SMr,6,SMrw);
          end;
          //others
          if ((Left(itype,1) <> "M") and (Left(itype,1) <> "D") and (Left(itype,1) <> "A")) then begin
            MatRowGet(SMr,7,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + sumval/1000;
            end;
            if (GetYear(dat1) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + sumval/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + sumval/1000;
            end;
            MatRowPut(SMr,7,SMrw);
            end;

            // Cost Cover
            MatRowGet(SMr,9,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + a * IVrw.rowGP/1000;
            end;
            if (GetYear(dat1) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + a * IVrw.rowGP/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + a * IVrw.rowGP/1000;
            end;
          MatRowPut(SMr,9,SMrw);
        end;
        //
      end;
    end;
  end;
  return;
end;

global
procedure VanaSumUpInv(var record SMVc SMr,record RcVc RepSpec, var val v1, var val v2, var val v4,date ldate1, date ldate2)
begin
  record IVVc IVr;
  row IVVc IVrw;
  row SMVc SMrw;
  Boolean TrHs1,test,TrHs;
  Date dat1,dat2;
  integer LastYear,ThisYear;
  string 255 tstr;
  string 5 itype;
  integer rw,i,rwcnt,k;
  integer ilan,irow;
  integer weeknumb;
  integer a;
  val ikoef;
  val val21,val22,val23,val24;     // (2) Quantity in tons
  val sumval;

  LastYear = GetYear(RepSpec.sStartDate) - 1;
  ThisYear = GetYear(RepSpec.sStartDate);

  if nonblank(RepSpec.f1) then begin
  dat1 = StringToDate("01.01." & ThisYear);
  end else begin
  dat1 = StringToDate("01.01." & LastYear);
  end;
  TrHs1 = true;
  //new 2002
  IVr.InvDate = dat1;
  ResetLoop(IVr);
  while (LoopKey("InvDate",IVr,1,TrHs1)) begin
    test = true;
    if (IVr.Invalid == 1) then begin
      test = false;
    end;
    if (DateInRange(IVr.InvDate, dat1,RepSpec.sEndDate)==false) then begin
      test = false;
    end;
    if (IVr.InvType == 3) then begin
      a = -1;
    end else begin
      a = 1;
    end;
    if nonblank(RepSpec.f1) then begin
      if (RepSpec.f1 <> IVr.CustCode) then begin
        test = false;
      end;
    end;
    if (IVr.OrderNr>0) then begin
      test = false;
    end;
    if (test) then begin
      test = false;
      if (IVr.Location=="LADU")  then begin
        test = true;
      end;
      if (IVr.Location=="K-LADU") then begin
        test = true;
      end;
    end;
    if test then begin
      // (3) COLUMN FROM INVOICE
      // number of orders
      MatRowGet(SMr,0,SMrw);
      if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
        SMrw.DebVal = SMrw.DebVal +1;
      end;

      if (GetYear(dat1) == LastYear) then begin
        if (GetYear(IVr.InvDate) == LastYear) then begin
          if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
            SMrw.CredVal2 = SMrw.CredVal2 +1;
          end;
        end;
      end;
      if (GetYear(IVr.InvDate) == ThisYear) then begin
        SMrw.CredVal = SMrw.CredVal +1;
      end;
      MatRowPut(SMr,0,SMrw);

      // ITEM QTY AND SUMS
      rwcnt = MatRowCnt(IVr);
      for (i = 0 ; i<rwcnt ;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        if nonblank(IVrw.ArtCode) then begin
          sumval = a * MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
            v1 = v1 + sumval/1000;
          end;
          if (GetYear(dat1) == LastYear) then begin
            if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
              v4 = v4 + sumval/1000;
            end;
          end;
          if (GetYear(IVr.InvDate) == ThisYear) then begin
            v2 = v2 + sumval/1000;
          end;

          //2002 GetItemTel(IVrw.ArtCode,itype,ikoef,SMr,RepSpec.sStartDate,RepSpec.sEndDate,IVr.InvDate,IVrw.Quant,dat1,LastYear,ThisYear);
          GetItemTel(IVrw.ArtCode,itype,ikoef,SMr,RepSpec.sStartDate,RepSpec.sEndDate,IVr.InvDate,IVrw.Quant,dat1,ThisYear,LastYear);
          //metal
          if (Left(itype,1) == "M") then begin
            // Qty in Tons
            MatRowGet(SMr,1,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + a * IVrw.Quant * ikoef/1000;
              val21 = val21 + a * IVrw.Quant * ikoef/1000;
            end;
            if (GetYear(dat1) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + a * IVrw.Quant * ikoef/1000;
                val24 = val24 + IVrw.Quant * a * ikoef/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + a * IVrw.Quant * ikoef/1000;
              val22 = val22 + IVrw.Quant * a * ikoef/1000;
            end;
            MatRowPut(SMr,1,SMrw);
          end;
          //accessories
          if (Left(itype,1) == "A") then begin
            MatRowGet(SMr,5,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + sumval/1000;
            end;
            if (GetYear(dat1) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + sumval/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + sumval/1000;
            end;
            MatRowPut(SMr,5,SMrw);
          end;
          //dies
          if (Left(itype,1) == "D") then begin
            MatRowGet(SMr,6,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + sumval/1000;
            end;
            if (GetYear(IVr.InvDate) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + sumval/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + sumval/1000;
            end;
            MatRowPut(SMr,6,SMrw);
          end;
          //others
          if ((Left(itype,1) <> "M") and (Left(itype,1) <> "D") and (Left(itype,1) <> "A")) then begin
            MatRowGet(SMr,7,SMrw);
            if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
              SMrw.DebVal = SMrw.DebVal + sumval/1000;
            end;
            if (GetYear(dat1) == LastYear) then begin
              if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
                SMrw.CredVal2 = SMrw.CredVal2 + sumval/1000;
              end;
            end;
            if (GetYear(IVr.InvDate) == ThisYear) then begin
              SMrw.CredVal = SMrw.CredVal + sumval/1000;
            end;
            MatRowPut(SMr,7,SMrw);
          end;
          // Cost Cover
          MatRowGet(SMr,9,SMrw);
          if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
            SMrw.DebVal = SMrw.DebVal + a * IVrw.rowGP/1000;
          end;
          if (GetYear(dat1) == LastYear) then begin
            if (DateInRange(IVr.InvDate,ldate1,ldate2)==true) then begin
              SMrw.CredVal2 = SMrw.CredVal2 + a * IVrw.rowGP/1000;
            end;
          end;
          if (GetYear(IVr.InvDate) == ThisYear) then begin
            SMrw.CredVal = SMrw.CredVal + a * IVrw.rowGP/1000;
          end;
          MatRowPut(SMr,9,SMrw);
        end;
      end;
    end;
  end;
  return;
end;


